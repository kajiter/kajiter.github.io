<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>这世上从来没有两片完全相同的树叶</title>
      <link href="/2020/01/17/%E8%BF%99%E4%B8%96%E4%B8%8A%E4%BB%8E%E6%9D%A5%E6%B2%A1%E6%9C%89%E4%B8%A4%E7%89%87%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91%E5%8F%B6/"/>
      <url>/2020/01/17/%E8%BF%99%E4%B8%96%E4%B8%8A%E4%BB%8E%E6%9D%A5%E6%B2%A1%E6%9C%89%E4%B8%A4%E7%89%87%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91%E5%8F%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="这世上从来没有两片完全相同的树叶"><a href="#这世上从来没有两片完全相同的树叶" class="headerlink" title="这世上从来没有两片完全相同的树叶"></a>这世上从来没有两片完全相同的树叶</h3><h3 id="这世上竟然会有人相信“人生而平等”"><a href="#这世上竟然会有人相信“人生而平等”" class="headerlink" title="这世上竟然会有人相信“人生而平等”"></a>这世上竟然会有人相信“人生而平等”</h3><p>让那些抱怨家庭，抱怨社会的傻逼早日登入极乐世界吧！ 阿门</p><p>生命的过程中无可避免的两大要素：遗传与环境。当然这并不是严谨的生物学理论，而是一种宏观社会学的观点。这里的遗传包括遗传基因，也包括遗传环境，总之父辈所提供的一切与之类似的遗传因素都可归纳为遗传；这里的环境即为非遗传的所有客观存在的物理环境。</p><p>也可以换个角度理解，遗传代表着与父辈的相似性，而环境既是改变这种相似性的潜在因素。然而至于说改变了没有，以及改变了多少，也许只有“上帝因子”才加以量化说明。</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于算法APP的想法</title>
      <link href="/2020/01/12/%E5%85%B3%E4%BA%8E%E7%AE%97%E6%B3%95APP%E7%9A%84%E6%83%B3%E6%B3%95/"/>
      <url>/2020/01/12/%E5%85%B3%E4%BA%8E%E7%AE%97%E6%B3%95APP%E7%9A%84%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>可以制作一款 APP，用游戏的方式讲解各种算法技巧。分为基础版的脑力开发，和进阶版的专业知识。<br>比如说制作 C语言版的排序算法，通过细节的设计，协助用户独立完成某一算法设计，有调试按钮，点击后随机生成100 条不同高度的彩带，3 秒倒计时后，开始按用户算法运行，有成功提示和失败提示。<br><img src="https://i.loli.net/2020/01/12/nxtsU3TI5wFbD2u.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/01/12/iSyhBeNFIMdLaJ6.png" alt="image.png"></p><hr><p>今天在抖音看到一条有趣的脑洞，有机会可以延伸思考。<br>人类进化史上，先学会使用陶器后退化至使用石器；华夏文明与美索文明几乎同一时期爆发式发展，两地却远隔万里，语言体系都不同，没有相互学习互相交流的印记。各文明均有相似的神话，或是外星文明的解读。推论——外星文明定期造访地球，改变环境，传授科技。</p><hr><h2 id="Logan-洛基-可以用作名字"><a href="#Logan-洛基-可以用作名字" class="headerlink" title="Logan 洛基 可以用作名字"></a>Logan 洛基 可以用作名字</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg使用记录</title>
      <link href="/2019/12/16/ffmpeg%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/16/ffmpeg%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="ffmpeg语法："><a href="#ffmpeg语法：" class="headerlink" title="ffmpeg语法："></a>ffmpeg语法：</h2><pre><code>// 改后缀名ffmpeg -i aaa.avi newName.mp4// 视频截取 注意-to 后的时间参数为从初始值开始截取多少时间ffmpeg -ss 00:11:05 -i old.mp4 -to 00:01:50 new.mp4# 解释：从视频 old.mp4的第11分05秒开始，截取1分05秒的视频，并命名为new.mp4// -y 参数含义导出文件时，如果发现路径下已有该命名的文件，则强制覆盖。ffmpeg -y *****</code></pre><hr><a id="more"></a><hr><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>捷波X-BlueP43主板BIOS设置记录</title>
      <link href="/2019/12/02/%E6%8D%B7%E6%B3%A2X-BlueP43%E4%B8%BB%E6%9D%BFBIOS%E8%AE%BE%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/02/%E6%8D%B7%E6%B3%A2X-BlueP43%E4%B8%BB%E6%9D%BFBIOS%E8%AE%BE%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一个十多年前奇葩的主板，让我无数次的掉进深沟的老主板，必须记录下来"><a href="#这是一个十多年前奇葩的主板，让我无数次的掉进深沟的老主板，必须记录下来" class="headerlink" title="这是一个十多年前奇葩的主板，让我无数次的掉进深沟的老主板，必须记录下来"></a>这是一个十多年前奇葩的主板，让我无数次的掉进深沟的老主板，必须记录下来</h1><h2 id="开机按-Del-进入-BIOS"><a href="#开机按-Del-进入-BIOS" class="headerlink" title="开机按 Del 进入 BIOS"></a>开机按 Del 进入 BIOS</h2><a id="more"></a><h2 id="配置-U盘引导系统异常麻烦"><a href="#配置-U盘引导系统异常麻烦" class="headerlink" title="配置 U盘引导系统异常麻烦"></a>配置 U盘引导系统异常麻烦</h2><h3 id="1-选择主板整合设备设置-，第四项“Integrated-Peripherals”"><a href="#1-选择主板整合设备设置-，第四项“Integrated-Peripherals”" class="headerlink" title="1.选择主板整合设备设置 ，第四项“Integrated Peripherals”"></a>1.选择主板整合设备设置 ，第四项“Integrated Peripherals”</h3><p><img src="https://i.loli.net/2019/12/02/tjH5XnGg4NQqVuZ.png" alt="image.png"></p><hr><h3 id="2-进入菜单之后选择第二项“Onboard-Device-Function”"><a href="#2-进入菜单之后选择第二项“Onboard-Device-Function”" class="headerlink" title="2.进入菜单之后选择第二项“Onboard Device Function”"></a>2.进入菜单之后选择第二项“Onboard Device Function”</h3><p><img src="https://i.loli.net/2019/12/02/x4iErJ5Vd8ZqzcM.png" alt="image.png"></p><hr><h3 id="3-一定要把图中高亮部最后一项，分支持U盘设备，“USB-Storage-Legacy-Support”设置为Enabled"><a href="#3-一定要把图中高亮部最后一项，分支持U盘设备，“USB-Storage-Legacy-Support”设置为Enabled" class="headerlink" title="3.一定要把图中高亮部最后一项，分支持U盘设备，“USB Storage Legacy Support”设置为Enabled ;"></a>3.一定要把图中高亮部最后一项，分支持U盘设备，“USB Storage Legacy Support”设置为Enabled ;</h3><ul><li><h3 id="同时也可以把除了第二项“-Onboard-PCIE-Lan-BootRom”保持-Disabled以外，其他所有项均设置为-Enabled-。"><a href="#同时也可以把除了第二项“-Onboard-PCIE-Lan-BootRom”保持-Disabled以外，其他所有项均设置为-Enabled-。" class="headerlink" title="同时也可以把除了第二项“ Onboard PCIE Lan BootRom”保持 Disabled以外，其他所有项均设置为 Enabled 。"></a>同时也可以把除了第二项“ Onboard PCIE Lan BootRom”保持 Disabled以外，其他所有项均设置为 Enabled 。</h3></li><li><h3 id="设置成功后-“保存退出并重新启动”-F10-，"><a href="#设置成功后-“保存退出并重新启动”-F10-，" class="headerlink" title="设置成功后 “保存退出并重新启动”(F10) ，"></a>设置成功后 <em>“保存退出并重新启动”(F10)</em> ，</h3></li><li><h3 id="然后再重新回到这个页面，检查能否在最后一行识别出我们插上的-U盘。"><a href="#然后再重新回到这个页面，检查能否在最后一行识别出我们插上的-U盘。" class="headerlink" title="然后再重新回到这个页面，检查能否在最后一行识别出我们插上的 U盘。"></a>然后再重新回到这个页面，检查能否在最后一行识别出我们插上的 U盘。</h3></li></ul><p><img src="https://i.loli.net/2019/12/02/atdS43pg6mIG9Qi.png" alt="image.png"></p><p>↑如图，最后一行就已经识别出 U盘了。</p><hr><h3 id="4-按两次ESC-，回到BIOS主菜单，选择第二项“Advanced-BIOS-Setup”，进入高级系统设置"><a href="#4-按两次ESC-，回到BIOS主菜单，选择第二项“Advanced-BIOS-Setup”，进入高级系统设置" class="headerlink" title="4. 按两次ESC ，回到BIOS主菜单，选择第二项“Advanced BIOS Setup”，进入高级系统设置"></a>4. 按两次ESC ，回到BIOS主菜单，选择第二项“Advanced BIOS Setup”，进入高级系统设置</h3><p><img src="https://i.loli.net/2019/12/02/EAmSHU51raKkzpn.png" alt="image.png"></p><h3 id="提示：启动时想要关闭硬件检测（这里指鼠标，键盘不需要连接也希望能够正常启动），需要进入第一项“Standard-CMOS-Features”-gt-找到“Halt-On”-gt-设置为“No-Errors”-即可。"><a href="#提示：启动时想要关闭硬件检测（这里指鼠标，键盘不需要连接也希望能够正常启动），需要进入第一项“Standard-CMOS-Features”-gt-找到“Halt-On”-gt-设置为“No-Errors”-即可。" class="headerlink" title="提示：启动时想要关闭硬件检测（这里指鼠标，键盘不需要连接也希望能够正常启动），需要进入第一项“Standard CMOS Features” -> 找到“Halt On” -> 设置为“No Errors” 即可。"></a>提示：启动时想要关闭硬件检测（这里指鼠标，键盘不需要连接也希望能够正常启动），需要进入第一项“Standard CMOS Features” -&gt; 找到“Halt On” -&gt; 设置为“No Errors” 即可。</h3><hr><h3 id="5-选择进入第三项“Hard-Disk-Boot-Priority”，手动设置硬盘启动顺序"><a href="#5-选择进入第三项“Hard-Disk-Boot-Priority”，手动设置硬盘启动顺序" class="headerlink" title="5.选择进入第三项“Hard Disk Boot Priority”，手动设置硬盘启动顺序"></a>5.选择进入第三项“Hard Disk Boot Priority”，手动设置硬盘启动顺序</h3><p><img src="https://i.loli.net/2019/12/02/N8VHQRpXrZAGOk4.png" alt="image.png"></p><h3 id="ps-本页面虽然有“First-Boot-Device”之类的，但是经试验发现没什么卵用。但最后还是进去设置一下第一启动项设为-USB-FDD-，第二启动项设为-SATA硬盘。"><a href="#ps-本页面虽然有“First-Boot-Device”之类的，但是经试验发现没什么卵用。但最后还是进去设置一下第一启动项设为-USB-FDD-，第二启动项设为-SATA硬盘。" class="headerlink" title="ps: 本页面虽然有“First Boot Device”之类的，但是经试验发现没什么卵用。但最后还是进去设置一下第一启动项设为 USB-FDD ，第二启动项设为 SATA硬盘。"></a>ps: 本页面虽然有“First Boot Device”之类的，但是经试验发现没什么卵用。但最后还是进去设置一下第一启动项设为 USB-FDD ，第二启动项设为 SATA硬盘。</h3><h3 id="提示：“Boot-Up-Floppy-Seek”-为启动时检查软盘，建议设为-Disabled-，否则每次启动均会卡在设备检查界面，必须手动按-F1才会进一步启动-BIOS。"><a href="#提示：“Boot-Up-Floppy-Seek”-为启动时检查软盘，建议设为-Disabled-，否则每次启动均会卡在设备检查界面，必须手动按-F1才会进一步启动-BIOS。" class="headerlink" title="提示：“Boot Up Floppy Seek” 为启动时检查软盘，建议设为 Disabled ，否则每次启动均会卡在设备检查界面，必须手动按 F1才会进一步启动 BIOS。"></a>提示：“Boot Up Floppy Seek” 为启动时检查软盘，建议设为 Disabled ，否则每次启动均会卡在设备检查界面，必须手动按 F1才会进一步启动 BIOS。</h3><hr><h3 id="6-此时应该出现我们的-USB-设备了，根据屏幕下方的提示，光标移动到此-USB-设备上，然后按键盘“Page-UP”按钮，把-USB-启动项提升为第一启动项。保存退出并重启即可进入-U盘引导。"><a href="#6-此时应该出现我们的-USB-设备了，根据屏幕下方的提示，光标移动到此-USB-设备上，然后按键盘“Page-UP”按钮，把-USB-启动项提升为第一启动项。保存退出并重启即可进入-U盘引导。" class="headerlink" title="6.此时应该出现我们的 USB 设备了，根据屏幕下方的提示，光标移动到此 USB 设备上，然后按键盘“Page UP”按钮，把 USB 启动项提升为第一启动项。保存退出并重启即可进入 U盘引导。"></a>6.此时应该出现我们的 USB 设备了，根据屏幕下方的提示，光标移动到此 USB 设备上，然后按键盘“Page UP”按钮，把 USB 启动项提升为第一启动项。保存退出并重启即可进入 U盘引导。</h3><ul><li><h3 id="如果此处没有出现我们的-USB-设备，则需要检查第-3-步。"><a href="#如果此处没有出现我们的-USB-设备，则需要检查第-3-步。" class="headerlink" title="如果此处没有出现我们的 USB 设备，则需要检查第 3 步。"></a>如果此处没有出现我们的 USB 设备，则需要检查第 3 步。</h3></li></ul><p><img src="https://i.loli.net/2019/12/02/sz4Pi5Hf2yBD3hl.png" alt="image.png"></p><hr><hr><p><img src="https://i.loli.net/2019/12/02/J3GKjlfPU4pXx17.jpg" alt="IMG_7983.jpg"></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS服务器的操作记录</title>
      <link href="/2019/12/02/CentOS%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/02/CentOS%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络教程"><a href="#1-网络教程" class="headerlink" title="1.网络教程"></a>1.网络教程</h2><p><a href="http://baijiahao.baidu.com/s?id=1599601257937774752&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">CentOS 服务器（带 GUI 图形界面）的安装教程</a></p><p><a href="http://mirrors.163.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">CentOS 各版本163.com 镜像下载</a> 支持迅雷等种子下载</p><p><a href="https://jingyan.baidu.com/article/ed15cb1b571a631be36981c4.html" target="_blank" rel="noopener">配置开机自启项</a></p><p>促使我下定决心安装 CentOS 的两个教程：</p><p><a href="https://www.jianshu.com/p/63b29135c041" target="_blank" rel="noopener">充分利用服务器闲置资源，搭建成私有网盘</a></p><p><a href="https://blog.csdn.net/qq_41098163/article/details/100568932" target="_blank" rel="noopener">闲置电脑搭建为云服务器(Holer开源框架)</a> 内网穿透=从外网可访问</p><a id="more"></a><h2 id="链接远程服务器"><a href="#链接远程服务器" class="headerlink" title="链接远程服务器"></a>链接远程服务器</h2><h3 id="ssh-root-192-168-0-103"><a href="#ssh-root-192-168-0-103" class="headerlink" title="ssh root@192.168.0.103"></a>ssh <a href="mailto:root@192.168.0.103" target="_blank" rel="noopener">root@192.168.0.103</a></h3><hr><h2 id="在终端断开ssh连接而不关闭终端的方法："><a href="#在终端断开ssh连接而不关闭终端的方法：" class="headerlink" title="在终端断开ssh连接而不关闭终端的方法："></a>在终端断开ssh连接而不关闭终端的方法：</h2><h3 id="法1：Ctrl-D"><a href="#法1：Ctrl-D" class="headerlink" title="法1：Ctrl+D"></a>法1：Ctrl+D</h3><h3 id="法2：输入-logout"><a href="#法2：输入-logout" class="headerlink" title="法2：输入 logout"></a>法2：输入 logout</h3><h2 id="出现-ssh-链接警告时的解决办法"><a href="#出现-ssh-链接警告时的解决办法" class="headerlink" title="出现 ssh 链接警告时的解决办法"></a>出现 ssh 链接警告时的解决办法</h2><h3 id="前提是我清楚知道是我自己重新载入的-Linux-系统导致的证书不一致，并不是网络攻击导致的证书错误。"><a href="#前提是我清楚知道是我自己重新载入的-Linux-系统导致的证书不一致，并不是网络攻击导致的证书错误。" class="headerlink" title="前提是我清楚知道是我自己重新载入的 Linux 系统导致的证书不一致，并不是网络攻击导致的证书错误。"></a>前提是我清楚知道是我自己重新载入的 Linux 系统导致的证书不一致，并不是网络攻击导致的证书错误。</h3><pre><code>➜  ~ ssh root@192.168.0.103@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the ECDSA key sent by the remote host isSHA256:5DImiWgSYapc1LhSsvBmctGHwXmtwIGJTJjfhWCMQxc.Please contact your system administrator.Add correct host key in /Users/CL/.ssh/known_hosts to get rid of this message.Offending ECDSA key in /Users/CL/.ssh/known_hosts:7ECDSA host key for 192.168.0.103 has changed and you have requested strict checking.Host key verification failed.➜  ~ ssh-keygen -R 192.168.0.103# Host 192.168.0.103 found: line 7/Users/CL/.ssh/known_hosts updated.Original contents retained as /Users/CL/.ssh/known_hosts.old➜  ~ ssh root@192.168.0.103The authenticity of host '192.168.0.103 (192.168.0.103)' can't be established.ECDSA key fingerprint is SHA256:5DImiWgSYapc1LhSsvBmctGHwXmtwIGJTJjfhWCMQxc.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '192.168.0.103' (ECDSA) to the list of known hosts.root@192.168.0.103's password:</code></pre><h2 id="查看安装过的-CentOS-是-32-位机还是-64-位机"><a href="#查看安装过的-CentOS-是-32-位机还是-64-位机" class="headerlink" title="查看安装过的 CentOS 是 32 位机还是 64 位机"></a>查看安装过的 CentOS 是 32 位机还是 64 位机</h2><pre><code># echo $HOSTTYPEx86_64      # 为64位</code></pre><h2 id="yum（全称为-Yellow-dog-Updater-Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。"><a href="#yum（全称为-Yellow-dog-Updater-Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。" class="headerlink" title="yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。"></a>yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</h2><pre><code>yum常用命令安装软件(以foo-x.x.x.rpm为例）：yum install foo-x.x.x.rpm删除软件：yum remove foo-x.x.x.rpm或者yum erase foo-x.x.x.rpm升级软件：yum upgrade foo或者yum update foo查询信息：yum info foo搜索软件（以包含foo字段为例）：yum search foo显示软件包依赖关系：yum deplist fooupgrade 升级系统update[RPM包] 更新包search[关键词] 搜索包list 可安装和可更新的RPM包list installed 已安装的包check-update 检查可更新的包remove[RPM包] 卸载包clean all 清除全部clean packages 清除临时包文件（/var/cache/yum 下文件）clean headers 清除rpm头文件clean oldheaders 清除旧的rpm头文件deplist 列出包的依赖provides[关键词] 搜索特定包文件名reinstall[RPM包] 重新安装包repolist 显示资源库的配置resolvedep 指定依赖</code></pre><h2 id="wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。"><a href="#wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。" class="headerlink" title="wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。"></a>wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。</h2><p>wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。所谓的自动下载是指，wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个wget下载任务，然后退出系统，wget将在后台执行直到任务完成</p><p> wget 可以跟踪HTML页面上的链接依次下载来创建远程服务器的本地版本，完全重建原始站点的目录结构。这又常被称作”递归下载”。</p><p> wget 非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性.如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用</p><h3 id="常用的命令展示"><a href="#常用的命令展示" class="headerlink" title="常用的命令展示"></a>常用的命令展示</h3><pre><code>使用wget -O下载并以不同的文件名保存(-O：下载文件到对应目录，并且修改文件名称)wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=1080使用wget -b url     进行后台下载wget -b http://www.minjieren.com/wordpress-3.1-zh_CN.zip备注： 你可以cd到下载目录，然后使用以下命令来察看下载进度：$ tail -f wget-log    并且可以 control + c 随时切出，进行后台下载利用-spider: 模拟下载，不会下载，只是会检查是否网站是否好着# wget --spider  www.baidu.com    #不下载任何文件</code></pre><h2 id="通用文件操作命令"><a href="#通用文件操作命令" class="headerlink" title="通用文件操作命令"></a>通用文件操作命令</h2><pre><code>文件的复制 - cp移动 - mv (也可以做到文件重命名)删除 - rm  cp path1/file1 path/file2 mv ~/path/name1 /cl/docu/name2 rm path/file 删除时会默认询问是否确认，输入 y 即可。 rm -r path 删除某个目录，包括目录下的所有文件 也可以选择强制删除语句 rm -f path/file简单查看文件内容(不进行编辑或修改)cat path/file查看文件权限ls -al查看空间使用情况df -h创建软连接，命令如下：ln -s /源地址 /目标地址ln的链接分软链接和硬链接两种：1、软链接就是：“ln –s 源文件 目标文件”，只会在选定的位置上生成一个文件的镜像，不会占用磁盘空间，类似与windows的快捷方式。2、硬链接ln源文件目标文件，没有参数-s， 会在选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</code></pre><h2 id="常用的-yum-工具包"><a href="#常用的-yum-工具包" class="headerlink" title="常用的 yum 工具包"></a>常用的 yum 工具包</h2><pre><code>yun install zip  yun install -y unzip#yum install xxx 如果安装的软件有询问会卡在询问页，如果希望安装过程自己很清楚的可以使用此命令；#如果希加 -y 默认在下载过程中对所有的询问进行 yes 操作.</code></pre><h3 id="netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。"><a href="#netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。" class="headerlink" title="netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。"></a>netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</h3><pre><code>yum -y install net-tools显示网卡列表netstat –i显示组播组的关系netstat –g显示网络统计netstat -s常用组合：netstat -lntup  说明： l:listening   n:num   t:tcp  u:udp  p:process显示关于以太网的统计数据netstat –e说明：用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量）显示路由信息netstat –rroute –n   【也可以显示路由信息】找出程序运行的端口netstat -ap | grep ssh在 netstat 输出中显示 TCP连接信息netstat -pt</code></pre><h2 id="查看-CentOS-RedHat-版本号"><a href="#查看-CentOS-RedHat-版本号" class="headerlink" title="查看 CentOS/ RedHat 版本号"></a>查看 CentOS/ RedHat 版本号</h2><pre><code># cat /etc/redhat-releaseCentOS Linux release 7.7.1908 (Core)</code></pre><h2 id="查看-Linux-内核版本号"><a href="#查看-Linux-内核版本号" class="headerlink" title="查看 Linux 内核版本号"></a>查看 Linux 内核版本号</h2><pre><code>[root@localhost ~]# unameLinux[root@localhost ~]# uname -r3.10.0-1062.el7.x86_64[root@localhost ~]# uname -aLinux localhost.localdomain 3.10.0-1062.el7.x86_64 #1 SMP Wed Aug 7 18:08:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</code></pre><h2 id="安装-Xampp-教程"><a href="#安装-Xampp-教程" class="headerlink" title="安装 Xampp 教程"></a>安装 Xampp 教程</h2><pre><code>#开启xampp，命令为：sudo/opt/lampp/xampp start#停止xampp，命令为：sudo/opt/lampp/xampp stop</code></pre><h3 id="https-www-cnblogs-com-wanghuaijun-p-5476435-html-这个教程比较清晰，但也比较老了。如果安装的是新一点版本的话还会遇到开启-CentOS-端口防火墙的问题。下面是解决思路"><a href="#https-www-cnblogs-com-wanghuaijun-p-5476435-html-这个教程比较清晰，但也比较老了。如果安装的是新一点版本的话还会遇到开启-CentOS-端口防火墙的问题。下面是解决思路" class="headerlink" title="https://www.cnblogs.com/wanghuaijun/p/5476435.html  这个教程比较清晰，但也比较老了。如果安装的是新一点版本的话还会遇到开启 CentOS 端口防火墙的问题。下面是解决思路"></a><a href="https://www.cnblogs.com/wanghuaijun/p/5476435.html" target="_blank" rel="noopener">https://www.cnblogs.com/wanghuaijun/p/5476435.html</a>  这个教程比较清晰，但也比较老了。如果安装的是新一点版本的话还会遇到开启 CentOS 端口防火墙的问题。下面是解决思路</h3><h2 id="开启-CentOS-某个端口-如：80-端口"><a href="#开启-CentOS-某个端口-如：80-端口" class="headerlink" title="开启 CentOS 某个端口 如：80 端口"></a>开启 CentOS 某个端口 如：80 端口</h2><p>CentOS7中，默认会开启 firewall 防火墙，只暴露一个 22 端口。</p><pre><code>1.需要工具包查看端口使用情况# netstat-bash: netstat: 未找到命令# yum install -y net-tools···#2.显示出当前主机打开的所有端口# netstat -tlunp···-A IN_public_allow -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,UNTRACKED -j ACCEPTCOMMIT#检查 80 端口是否开放3.查看防火墙设置# iptables-save···#如果没后几行没有提示 80 端口打开的语句，则需要手动开放防火墙保护的端口4.手动开放防火墙保护的80端口：第一条命令是添加端口，第二条命令是重载防火墙。# firewall-cmd --zone=public --add-port=80/tcp --permanent# firewall-cmd --reload5.再次检查防火墙设置# iptables-save···-A IN_public_allow -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,UNTRACKED -j ACCEPT-A IN_public_allow -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,UNTRACKED -j ACCEPTCOMMIT#最后出现 80 即表示成功！</code></pre><h2 id="nginx-服务"><a href="#nginx-服务" class="headerlink" title="nginx 服务"></a>nginx 服务</h2><pre><code>启动服务$ /usr/local/nginx/sbin/nginx重新加载服务$ /usr/local/nginx/sbin/nginx -s reload停止服务$ /usr/local/nginx/sbin/nginx -s stop查看nginx服务进程$ ps -ef | grep nginx # 查看服务进程</code></pre><h2 id="使用-systemctl-设置开机自启动某服务"><a href="#使用-systemctl-设置开机自启动某服务" class="headerlink" title="使用 systemctl 设置开机自启动某服务"></a>使用 systemctl 设置开机自启动某服务</h2><p><a href="https://blog.csdn.net/niufenger/article/details/94648199" target="_blank" rel="noopener">https://blog.csdn.net/niufenger/article/details/94648199</a></p><pre><code>1.登录系统后，切换到以下目录cd /lib/systemd/system/2.在此目录下，新建一个lampp.service。3.vi /lib/systemd/system/lampp.service文件内容如下-------------[Unit]Description=lamppAfter=network.target[Service]Type=forkingExecStart=/opt/lampp/lampp startExecReload=/opt/lampp/lampp restartExecStop=/opt/lampp/lampp  stopPrivateTmp=true  [Install]WantedBy=multi-user.target---------------###   解释   ###[Unit]:服务的说明Description:描述服务After:描述服务类别[Service]服务运行参数的设置Type=forking是后台运行的形式ExecStart为服务的具体运行命令ExecReload为重启命令ExecStop为停止命令PrivateTmp=True表示给服务分配独立的临时空间注意：[Service]的启动、重启、停止命令全部要求使用绝对路径[Install]服务安装的相关设置，可设置为多用户4.编辑好了，就保存退出。用下面的命令来修改文件权限。chmod 754 /lib/systemd/system/lampp.service5.设置开机启动systemctl enable lampp.service6.扩展操作启动lampp服务systemctl start lampp.service设置开机自启动systemctl enable lampp.service停止开机自启动systemctl disable lampp.service查看服务当前状态systemctl status lampp.service重新启动服务systemctl restart lampp.service查看所有已启动的服务systemctl list-units --type=service</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><h3 id="脚本方式，未验证"><a href="#脚本方式，未验证" class="headerlink" title="脚本方式，未验证"></a><a href="https://blog.csdn.net/niufenger/article/details/94648199" target="_blank" rel="noopener">脚本方式，未验证</a></h3><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac下创建CentOS的U盘引导文件</title>
      <link href="/2019/12/02/Mac%E4%B8%8B%E5%88%9B%E5%BB%BACentOS%E7%9A%84U%E7%9B%98%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6/"/>
      <url>/2019/12/02/Mac%E4%B8%8B%E5%88%9B%E5%BB%BACentOS%E7%9A%84U%E7%9B%98%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="想搞个服务器玩玩，于是就在淘汰的旧电脑上装上了-CentOS"><a href="#想搞个服务器玩玩，于是就在淘汰的旧电脑上装上了-CentOS" class="headerlink" title="想搞个服务器玩玩，于是就在淘汰的旧电脑上装上了 CentOS"></a>想搞个服务器玩玩，于是就在淘汰的旧电脑上装上了 CentOS</h1><a id="more"></a><h2 id="第一步格式化你的-U盘，注意给你-U盘起一个简单（不能超过-8-个字符！！！）（不要用汉字！！！）特殊的名称（不要简单叫作-C、D、E-之类的）"><a href="#第一步格式化你的-U盘，注意给你-U盘起一个简单（不能超过-8-个字符！！！）（不要用汉字！！！）特殊的名称（不要简单叫作-C、D、E-之类的）" class="headerlink" title="第一步格式化你的 U盘，注意给你 U盘起一个简单（不能超过 8 个字符！！！）（不要用汉字！！！）特殊的名称（不要简单叫作 C、D、E 之类的）"></a>第一步格式化你的 U盘，注意给你 U盘起一个简单（不能超过 8 个字符！！！）（不要用汉字！！！）特殊的名称（不要简单叫作 C、D、E 之类的）</h2><h1 id="上面三个括号的忠告不遵循的话都会伴随着说大不大、说小不小的坑，君请自便。"><a href="#上面三个括号的忠告不遵循的话都会伴随着说大不大、说小不小的坑，君请自便。" class="headerlink" title="上面三个括号的忠告不遵循的话都会伴随着说大不大、说小不小的坑，君请自便。"></a>上面三个括号的忠告不遵循的话都会伴随着说大不大、说小不小的坑，君请自便。</h1><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>➜  ~ diskutil list/dev/disk0 (internal, physical):   #:                       TYPE NAME                    SIZE       IDENTIFIER   0:      GUID_partition_scheme                        *251.0 GB   disk0   1:                        EFI EFI                     209.7 MB   disk0s1   2:                 Apple_APFS Container disk1         171.8 GB   disk0s2   3:       Microsoft Basic Data                         79.0 GB    disk0s3/dev/disk1 (synthesized):   #:                       TYPE NAME                    SIZE       IDENTIFIER   0:      APFS Container Scheme -                      +171.8 GB   disk1                                 Physical Store disk0s2   1:                APFS Volume Macintosh HD            129.2 GB   disk1s1   2:                APFS Volume Preboot                 46.2 MB    disk1s2   3:                APFS Volume Recovery                510.5 MB   disk1s3   4:                APFS Volume VM                      1.1 GB     disk1s4/dev/disk2 (external, physical):   #:                       TYPE NAME                    SIZE       IDENTIFIER   0:     FDisk_partition_scheme                        *7.8 GB     disk2   1:                 DOS_FAT_32 CL                      7.8 GB     disk2s1➜  ~ diskutil unmountDisk /dev/disk2Unmount of all volumes on disk2 was successful➜  ~ sudo dd if=/Users/CL/Desktop/CentOS-7-x86_64-Minimal-1908.iso of=/dev/disk2 bs=1mPassword:942+0 records in942+0 records out987758592 bytes transferred in 543.310278 secs (1818038 bytes/sec)</code></pre><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><p>diskutil list ：查看本机上所有磁盘</p><ul><li>/dev/disk0 为我的 MacOS 主系统盘</li><li>/dev/disk1 为我安装的 Windows 双系统</li><li>/dev/disk2 为我的 U盘，NAME 就叫做 CL</li></ul><p>所以我 unmount 的是我的 /dev/disk2 ，要根据实际情况决定</p><p>最后一句命令会运行很长时间，这是正常情况！！！不要轻易中断。根据网络以及自己的经验，执行这句代码需要 8-12 分钟左右。请起身运动，或者多喝热水。</p><pre><code>942+0 records in942+0 records out987758592 bytes transferred in 543.310278 secs (1818038 bytes/sec)</code></pre><p>这些就是成功提示，同时你的电脑会弹窗提示不识别你的 U盘，这也是正常情况，根据提示弹出 U盘即可。你的 U盘并没有损坏！！！</p><h1 id="最后，再给你看一眼我的鞋盒-Linux-服务器"><a href="#最后，再给你看一眼我的鞋盒-Linux-服务器" class="headerlink" title="最后，再给你看一眼我的鞋盒 Linux 服务器"></a>最后，再给你看一眼我的鞋盒 Linux 服务器</h1><p><img src="https://i.loli.net/2019/12/02/QIUPXgnoJqW9a81.jpg" alt="IMG_7979.jpg"></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>相片纸张的各种尺寸详表</title>
      <link href="/2019/11/29/%E7%9B%B8%E7%89%87%E7%BA%B8%E5%BC%A0%E7%9A%84%E5%90%84%E7%A7%8D%E5%B0%BA%E5%AF%B8%E8%AF%A6%E8%A1%A8/"/>
      <url>/2019/11/29/%E7%9B%B8%E7%89%87%E7%BA%B8%E5%BC%A0%E7%9A%84%E5%90%84%E7%A7%8D%E5%B0%BA%E5%AF%B8%E8%AF%A6%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="常用尺寸"><a href="#常用尺寸" class="headerlink" title="常用尺寸"></a>常用尺寸</h2><p>1 寸照片 = 25mm * 35mm<br>2 寸照片 = 35mm * 53mm<br>6 寸相片 = 152mm * 102mm</p><p>A4 纸 = 210cm * 297cm</p><a id="more"></a><p><img src="https://i.loli.net/2019/11/29/z4IEvwxHulYr1Uf.png" alt="2fdda3cc7cd98d1041a814972c3fb80e7bec9013.png"></p><p><img src="https://i.loli.net/2019/11/29/NZi2GfcEyXzqtOj.png" alt="Screen Shot 2019-11-29 at 13.10.19.png"></p><hr><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p><img src="https://i.loli.net/2019/11/29/UDPb6qiR7TegpuI.jpg" alt="ASCII.jpg"></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络唤醒你的电脑</title>
      <link href="/2019/11/29/%E7%BD%91%E7%BB%9C%E5%94%A4%E9%86%92%E4%BD%A0%E7%9A%84Windows%E5%A4%8D%E6%9C%BA/"/>
      <url>/2019/11/29/%E7%BD%91%E7%BB%9C%E5%94%A4%E9%86%92%E4%BD%A0%E7%9A%84Windows%E5%A4%8D%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="wakeonlan-00-D8-61-71-FF-97"><a href="#wakeonlan-00-D8-61-71-FF-97" class="headerlink" title="wakeonlan  00:D8:61:71:FF:97"></a>wakeonlan  00:D8:61:71:FF:97</h3><h2 id="本文采用演示示例为："><a href="#本文采用演示示例为：" class="headerlink" title="本文采用演示示例为："></a>本文采用演示示例为：</h2><h3 id="1-主工作机-MacBookPro"><a href="#1-主工作机-MacBookPro" class="headerlink" title="1.主工作机 MacBookPro"></a>1.主工作机 MacBookPro</h3><h3 id="2-被唤醒机-微星B450-Windows10"><a href="#2-被唤醒机-微星B450-Windows10" class="headerlink" title="2.被唤醒机 微星B450+Windows10"></a>2.被唤醒机 微星B450+Windows10</h3><h3 id="3-网络条件：同一路由器下，即同一个网络。"><a href="#3-网络条件：同一路由器下，即同一个网络。" class="headerlink" title="3.网络条件：同一路由器下，即同一个网络。"></a>3.网络条件：同一路由器下，即同一个网络。</h3><h3 id="4-MacOS-下软件名：wakeonlan-（Linux-插件）"><a href="#4-MacOS-下软件名：wakeonlan-（Linux-插件）" class="headerlink" title="4.MacOS 下软件名：wakeonlan （Linux 插件）"></a>4.MacOS 下软件名：wakeonlan （Linux 插件）</h3><h3 id="5-Windows-下软件名：Wake-on-Lan-Monitor-主要用于测通，用完即删"><a href="#5-Windows-下软件名：Wake-on-Lan-Monitor-主要用于测通，用完即删" class="headerlink" title="5.Windows 下软件名：Wake on Lan Monitor  (主要用于测通，用完即删)"></a>5.Windows 下软件名：Wake on Lan Monitor  (主要用于测通，用完即删)</h3><a id="more"></a><p>“远程控制” 这一操作对我们来说都不陌生，从当年的 QQ 远程控制，到后来的微信视频“远程”帮教父母解决各种这样的软件问题，我一直想找出一个最简洁高效的方案，向日葵控制端 之类的商业软件仍避免不了物理开机的问题，所说也有“花生棒”之类的物理配件，但是特别是对于2000 年之后的PC，主板网卡自带网络唤醒功能，而我们要做的就是攻克远程唤醒这最后一个障碍。</p><h2 id="一、确认被控制计算机硬件上支持网络唤醒"><a href="#一、确认被控制计算机硬件上支持网络唤醒" class="headerlink" title="一、确认被控制计算机硬件上支持网络唤醒"></a>一、确认被控制计算机硬件上支持网络唤醒</h2><p>硬件上实现网络开机，需要主板、网卡、电源 3 个设备支持。首先需要查看主板是否支持 Wake-Up OnInternal Modem（WOM）或者 Wake-up OnLAN（WOL）技术，如果支持就说明主板支持远程开机。<br>能否实现远程唤醒，其中最主要的一个部件就是网卡，一般来说 2000 年以后的主板均支持，更不用说最近两年的新机型。但如果你对你的主板没有信心，那么一定要进 BIOS 里进行检查，或上网搜索自己的主板相关的  Wakeup On Lan(WOL)信息。</p><h3 id="这里以最流行的-微星-B450m-迫击炮-为例，开启主板Wakeup-On-Lan-WOL-功能。"><a href="#这里以最流行的-微星-B450m-迫击炮-为例，开启主板Wakeup-On-Lan-WOL-功能。" class="headerlink" title="这里以最流行的 微星 B450m -迫击炮 为例，开启主板Wakeup On Lan(WOL) 功能。"></a>这里以最流行的 微星 B450m -迫击炮 为例，开启主板Wakeup On Lan(WOL) 功能。</h3><p> <code>高级</code> -&gt;<br>    <code>唤醒事件设置</code> -&gt;<br>        <code>将 PCIE设备唤醒</code> 和 <code>网络唤醒</code> 设置为 <code>允许 (Enable)</code></p><hr><h3 id="注：不同的机型差异较大，需要自行在互联网搜集自己型号主板-BIOS-的开启Wakeup-On-Lan-WOL-功能。"><a href="#注：不同的机型差异较大，需要自行在互联网搜集自己型号主板-BIOS-的开启Wakeup-On-Lan-WOL-功能。" class="headerlink" title="注：不同的机型差异较大，需要自行在互联网搜集自己型号主板 BIOS 的开启Wakeup On Lan(WOL) 功能。"></a>注：不同的机型差异较大，需要自行在互联网搜集自己型号主板 BIOS 的开启Wakeup On Lan(WOL) 功能。</h3><hr><h2 id="二、Windows系统设置"><a href="#二、Windows系统设置" class="headerlink" title="二、Windows系统设置"></a>二、Windows系统设置</h2><p>这里给出<a href="https://www.jianshu.com/p/d89b5560c3ed" target="_blank" rel="noopener">Intel的网卡设置教程</a></p><p>然而我的AMD 主板并不需要这么复杂，网卡不需要做出设置。</p><p>需要做的是获取此电脑的 ip 地址，和物理 MAC 地址。记在小本本上。</p><p>小白的话是打开路由器查看：<br>不同路由器界面不一，但原理相通。<br><img src="https://i.loli.net/2019/11/29/wGH7YtIJKDNaX3C.png" alt="Screen Shot 2019-11-29 at 16.40.47.png"></p><p>有 Linux 基础的同学，自然是进命令行查看，这里提示下非 Windows 用户可以在 win10 中搜索使用 “Windows PowerShell” ，这个要比 cmd 更 Linux 一点点。</p><pre><code>$ ipconfig</code></pre><hr><h2 id="三、Windows-安装测试接受软件"><a href="#三、Windows-安装测试接受软件" class="headerlink" title="三、Windows 安装测试接受软件"></a>三、Windows 安装测试接受软件</h2><p>软件名：Wake on Lan Monitor  (主要用于测试通接受到唤醒 UDP，测试成功后即可删除)</p><h3 id="官方下载链接"><a href="#官方下载链接" class="headerlink" title="官方下载链接"></a><a href="https://www.depicus.com/wake-on-lan/wake-on-lan-monitor" target="_blank" rel="noopener">官方下载链接</a></h3><h3 id="安装后点击-start-，即进入测试等待状态。"><a href="#安装后点击-start-，即进入测试等待状态。" class="headerlink" title="安装后点击 start ，即进入测试等待状态。"></a>安装后点击 start ，即进入测试等待状态。</h3><hr><h2 id="四、MacOS-安装-wakeonlan-包"><a href="#四、MacOS-安装-wakeonlan-包" class="headerlink" title="四、MacOS 安装 wakeonlan 包"></a>四、MacOS 安装 wakeonlan 包</h2><pre><code>➜  ~ brew install wakeonlan</code></pre><p>安装成功后，使用代码启动，发送 wakeup 的 UDP<br>注意-p 4343 这个端口号是 Windows 上 Wake on Lan Monitor 的测试端口，实际使用时不需要加端口号。</p><h3 id="此处的-MAC-地址-即为第二步-Windows-下查看到的-MAC地址-，这里用00-D8-61-71-FF-97-表示"><a href="#此处的-MAC-地址-即为第二步-Windows-下查看到的-MAC地址-，这里用00-D8-61-71-FF-97-表示" class="headerlink" title="此处的 MAC 地址 即为第二步 Windows 下查看到的 MAC地址 ，这里用00:D8:61:71:FF:97 表示"></a>此处的 <code>MAC 地址</code> 即为第二步 Windows 下查看到的 MAC地址 ，这里用<code>00:D8:61:71:FF:97</code> 表示</h3><pre><code>➜  ~ wakeonlan -p 4343  00:D8:61:71:FF:97Sending magic packet to 255.255.255.255:4343 with 00:D8:61:71:FF:97</code></pre><h3 id="这时如果你发现-Windows-中的-Wake-on-Lan-Monitor-软件中k开始打印数据，即表示一切配置成功，你终于可以实现一行代码网络唤醒另一台主机了！"><a href="#这时如果你发现-Windows-中的-Wake-on-Lan-Monitor-软件中k开始打印数据，即表示一切配置成功，你终于可以实现一行代码网络唤醒另一台主机了！" class="headerlink" title="这时如果你发现 Windows 中的 Wake on Lan Monitor 软件中k开始打印数据，即表示一切配置成功，你终于可以实现一行代码网络唤醒另一台主机了！"></a>这时如果你发现 Windows 中的 Wake on Lan Monitor 软件中k开始打印数据，即表示一切配置成功，你终于可以实现一行代码网络唤醒另一台主机了！</h3><h3 id="如果你Windows-中的Wake-on-Lan-Monitor毫无反应，则表示你哪一步做错了，返回好好检查一下吧。"><a href="#如果你Windows-中的Wake-on-Lan-Monitor毫无反应，则表示你哪一步做错了，返回好好检查一下吧。" class="headerlink" title="如果你Windows 中的Wake on Lan Monitor毫无反应，则表示你哪一步做错了，返回好好检查一下吧。"></a>如果你Windows 中的Wake on Lan Monitor毫无反应，则表示你哪一步做错了，返回好好检查一下吧。</h3><h2 id="五、实际使用"><a href="#五、实际使用" class="headerlink" title="五、实际使用"></a>五、实际使用</h2><p>把你的 Windows 关机后，在 Mac 中输入</p><pre><code>➜  ~ wakeonlan  你记下的MAC地址Sending magic packet to 255.255.255.255:9 with 00:**:61:71:FF:97</code></pre><h1 id="铛铛铛铛-大功告成！"><a href="#铛铛铛铛-大功告成！" class="headerlink" title="铛铛铛铛~~  大功告成！"></a>铛铛铛铛~~  大功告成！</h1><hr><p>这里特意截出来 wakeonlan 的安装信息，18KB真的小。</p><pre><code>➜  ~ brew install wakeonlan==&gt; Downloading https://mirrors.ustc.edu.cn/homebrew-bottles/bottles/wakeonlan-0######################################################################## 100.0%==&gt; Pouring wakeonlan-0.41.mojave.bottle.tar.gz🍺  /usr/local/Cellar/wakeonlan/0.41: 6 files, 18.6KB</code></pre><hr><hr><hr><hr><hr><h1 id="扩展和补充知识点"><a href="#扩展和补充知识点" class="headerlink" title="扩展和补充知识点"></a>扩展和补充知识点</h1><h2 id="MacBookPro-上控制-Windows-的官方软件"><a href="#MacBookPro-上控制-Windows-的官方软件" class="headerlink" title="MacBookPro 上控制 Windows 的官方软件"></a>MacBookPro 上控制 Windows 的官方软件</h2><h3 id="Microsoft-Remote-Desktop-for-Mac"><a href="#Microsoft-Remote-Desktop-for-Mac" class="headerlink" title="Microsoft Remote Desktop for Mac"></a><a href="https://install.appcenter.ms/orgs/rdmacios-k2vy/apps/Microsoft-Remote-Desktop-for-Mac/distribution_groups/All-users-of-Microsoft-Remote-Desktop-for-Mac" target="_blank" rel="noopener">Microsoft Remote Desktop for Mac</a></h3><h3 id="microsoft-官方使用文档"><a href="#microsoft-官方使用文档" class="headerlink" title="microsoft 官方使用文档"></a><a href="https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-mac" target="_blank" rel="noopener">microsoft 官方使用文档</a></h3><hr><h1 id="一些题外话，留作记录"><a href="#一些题外话，留作记录" class="headerlink" title="一些题外话，留作记录"></a>一些题外话，留作记录</h1><h2 id="设置-Windows-远程桌面"><a href="#设置-Windows-远程桌面" class="headerlink" title="设置 Windows 远程桌面"></a>设置 Windows 远程桌面</h2><h3 id="Windows-设置允许远程连接"><a href="#Windows-设置允许远程连接" class="headerlink" title="Windows 设置允许远程连接"></a>Windows 设置允许远程连接</h3><p><img src="https://i.loli.net/2019/11/29/KJ84unm3rdylezv.png" alt="851575021625_.pic_hd.jpg"></p><p><img src="https://i.loli.net/2019/11/29/Cuf1cLPwhx8UT6t.png" alt="861575021758_.pic_hd.jpg"></p><hr><h2 id="设置-Windows-访问局域网共享文档"><a href="#设置-Windows-访问局域网共享文档" class="headerlink" title="设置 Windows 访问局域网共享文档"></a>设置 Windows 访问局域网共享文档</h2><p><img src="https://i.loli.net/2019/11/29/sdrVHZgb1hEa3p2.png" alt="871575021914_.pic_hd.jpg"></p><p>首次进入需要设置游客账号密码，这里没有截图<br><img src="https://i.loli.net/2019/11/29/UBSOgPxvATrJcXM.png" alt="881575021948_.pic_hd.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo在MacOS中搭建个人博客</title>
      <link href="/2019/11/28/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8MacOS%E4%B8%AD%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/28/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8MacOS%E4%B8%AD%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/11/28/psi9Hu2qDc1dXLP.png" alt="Screen Shot 2019-11-28 at 12.10.28.png"></p><a id="more"></a><h1 id="hexo-官方文档"><a href="#hexo-官方文档" class="headerlink" title="hexo 官方文档"></a><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">hexo 官方文档</a></h1><h3 id="然而实际操作自然不会如它官方封面介绍的这么简单，下面是实际操作教程。"><a href="#然而实际操作自然不会如它官方封面介绍的这么简单，下面是实际操作教程。" class="headerlink" title="然而实际操作自然不会如它官方封面介绍的这么简单，下面是实际操作教程。"></a>然而实际操作自然不会如它官方封面介绍的这么简单，下面是实际操作教程。</h3><pre><code>hexo new 文章名称hexo cleanhexo ghexo d</code></pre><h2 id="图床（免费的图片服务器）"><a href="#图床（免费的图片服务器）" class="headerlink" title="图床（免费的图片服务器）"></a>图床（免费的图片服务器）</h2><h3 id="https-sm-ms-简单易懂，我才不会说是因为网址好记呢。"><a href="#https-sm-ms-简单易懂，我才不会说是因为网址好记呢。" class="headerlink" title="https://sm.ms/ 简单易懂，我才不会说是因为网址好记呢。"></a><a href="https://sm.ms/" target="_blank" rel="noopener">https://sm.ms/</a> 简单易懂，我才不会说是因为网址好记呢。</h3><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js相关使用</title>
      <link href="/2019/11/27/Node-js%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/27/Node-js%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-js-是一个基于-Chrome-v8-引擎的-JavaScript-运行环境。npm是-Node-js-自带的包管理工具"><a href="#Node-js-是一个基于-Chrome-v8-引擎的-JavaScript-运行环境。npm是-Node-js-自带的包管理工具" class="headerlink" title="Node.js 是一个基于 Chrome v8 引擎的 JavaScript 运行环境。npm是 Node.js 自带的包管理工具"></a>Node.js 是一个基于 Chrome v8 引擎的 JavaScript 运行环境。npm是 Node.js 自带的包管理工具</h2><a id="more"></a><p>这里可以类比联想 JAVA 运行环境：一个 JAVA 程序在运行时，必须需要在 JRE(JAVA Running Environment) 环境下运行；同时，JAVA 程序在开发时，除了种类繁多的 IDE(Integrated Development Environment) (我们平时称为：开发工具，一般包括 代码编辑器、编译器、调试器、图形用户界面、等)以外，还需要 JVM (JAVA Virtual Machine) JAVA 虚拟机 以及 JDK(JAVA Development Kit)JAVA语言软件开发工具包的 JAVA 标准类库部分 等。</p><p>（实际上 JDK 是 JAVA开发的核心，它包含了JVM + JAVA 类库+ JAVA 工具，这里把JVM 单独拿出来是因为JVM 是其中非常重要的一个部件）</p><p>Node.js 使 JavaScript 语言可以运行在服务端，使用事件驱动，非阻塞 I/O模型。它轻量级和高效的特性使得它非常适合在分布式设备上运行数据密集型的实时应用。</p><p><img src="https://i.loli.net/2019/11/28/Kl7LfH1ItNCW8Jv.png" alt="node.jpg"></p><h2 id="npm是-Node-js-自带的包管理工具。-Node-Package-Manager"><a href="#npm是-Node-js-自带的包管理工具。-Node-Package-Manager" class="headerlink" title="npm是 Node.js 自带的包管理工具。(Node Package Manager)"></a>npm是 Node.js 自带的包管理工具。(Node Package Manager)</h2><hr><h3 id="npm-的常用方法"><a href="#npm-的常用方法" class="headerlink" title="npm 的常用方法"></a>npm 的常用方法</h3><h3 id="查看是否安装及版本号"><a href="#查看是否安装及版本号" class="headerlink" title="查看是否安装及版本号"></a>查看是否安装及版本号</h3><pre><code>➜  ~ node -vv10.10.0➜  ~ npm -v6.13.1</code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre><code>npm update</code></pre><h3 id="安装package"><a href="#安装package" class="headerlink" title="安装package"></a>安装package</h3><pre><code>npm install &lt;package&gt;     # 安装在本地项目中 npm install -g &lt;package&gt;  # 安装在全局  // 安装包，并且将其保存你项目中的 package.json 文件: npm install &lt;package&gt; --save  </code></pre><h3 id="查看安装的-package"><a href="#查看安装的-package" class="headerlink" title="查看安装的 package"></a>查看安装的 package</h3><pre><code>$ npm list     # 本地$ npm list -g  # 全局  </code></pre><h3 id="对-package-的操作"><a href="#对-package-的操作" class="headerlink" title="对 package 的操作"></a>对 package 的操作</h3><pre><code>/*查看版本较低的包（本地或全局）:$ npm outdated [-g]  /*更新全部或特别指定一个包:$ npm update [&lt;package&gt;]  /*卸载包:$ npm uninstall &lt;package&gt;  </code></pre><h3 id="查看源地址"><a href="#查看源地址" class="headerlink" title="查看源地址"></a>查看源地址</h3><pre><code>➜  ~ npm config get registryhttps://registry.npm.taobao.org/</code></pre><h3 id="更换源-镜像-地址"><a href="#更换源-镜像-地址" class="headerlink" title="更换源/镜像 地址"></a>更换源/镜像 地址</h3><pre><code>#国内被墙，就切换成淘宝源npm config set registry https://registry.npm.taobao.org# 默认源npm config set registry https://registry.npmjs.org</code></pre><h2 id="Node-js-的安装"><a href="#Node-js-的安装" class="headerlink" title="Node.js 的安装"></a>Node.js 的安装</h2><h3 id="MacOS-下使用-Homebrew-安装"><a href="#MacOS-下使用-Homebrew-安装" class="headerlink" title="MacOS 下使用 Homebrew 安装"></a>MacOS 下使用 Homebrew 安装</h3><pre><code>brew install node </code></pre><hr><h4 id="关于-Homebrew-的安装参考MacOS安装-Homebrew"><a href="#关于-Homebrew-的安装参考MacOS安装-Homebrew" class="headerlink" title="关于 Homebrew 的安装参考MacOS安装 Homebrew"></a>关于 Homebrew 的安装参考<a href="https://kajiter.github.io/">MacOS安装 Homebrew</a></h4><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2019/11/27/Markdown/"/>
      <url>/2019/11/27/Markdown/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Markdown-就是-Mark（标记后）down-写下来-，就是所记即所得。"><a href="#Markdown-就是-Mark（标记后）down-写下来-，就是所记即所得。" class="headerlink" title="Markdown 就是 Mark（标记后）down (写下来)，就是所记即所得。"></a>Markdown 就是 Mark（标记后）down (写下来)，就是所记即所得。</h3><h3 id="Markdown-是通过字符来约束内容的，但是它是整行约束-即换行不继承"><a href="#Markdown-是通过字符来约束内容的，但是它是整行约束-即换行不继承" class="headerlink" title="Markdown 是通过字符来约束内容的，但是它是整行约束,即换行不继承"></a>Markdown 是通过字符来约束内容的，但是它是整行约束,即换行不继承</h3></blockquote><a id="more"></a><hr><h2 id="“-”的个数表示1-6级标题："><a href="#“-”的个数表示1-6级标题：" class="headerlink" title="“#”的个数表示1-6级标题："></a>“#”的个数表示1-6级标题：</h2><p>#一级标题<br>###三级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><hr><h2 id="表示加粗文字"><a href="#表示加粗文字" class="headerlink" title="**      **表示加粗文字"></a>**      **表示加粗文字</h2><p>普通的文字<br>**加粗的文字**<br><strong>加粗的文字</strong></p><h2 id="表示倾斜文字"><a href="#表示倾斜文字" class="headerlink" title="*        *表示倾斜文字"></a>*        *表示倾斜文字</h2><p>*这是一段斜体字*<br><em>这是一段斜体字</em></p><h2 id="表示删除文字"><a href="#表示删除文字" class="headerlink" title="~~   ~~表示删除文字"></a>~~   ~~表示删除文字</h2><p>~~删除线~~  与文字间不能有空格<br><del>aaa</del></p><hr><h2 id="—-或-表示分割线"><a href="#—-或-表示分割线" class="headerlink" title="— 或 *** 表示分割线"></a>— 或 *** 表示分割线</h2><blockquote><hr></blockquote><hr><h2 id="“-gt-”表示引用，引用内可以嵌套引用"><a href="#“-gt-”表示引用，引用内可以嵌套引用" class="headerlink" title="“>”表示引用，引用内可以嵌套引用"></a>“&gt;”表示引用，引用内可以嵌套引用</h2><p>&gt;这是一个引用<br>这是引用的结尾<br>&gt;&gt;这是一个二级引用</p><blockquote><p>这是一个引用<br>这是引用的结尾</p><blockquote><p>这是一个二级引用</p></blockquote></blockquote><hr><h2 id="import-std-io-三个点组圈出来的为代码块"><a href="#import-std-io-三个点组圈出来的为代码块" class="headerlink" title="```   #import std.io   ```  三个点组圈出来的为代码块"></a>```   #import std.io   ```  三个点组圈出来的为代码块</h2><h3 id="注意-“-“-与-“-‘-“-不同，位置在键盘中数字键“1”的左边，不是引号！"><a href="#注意-“-“-与-“-‘-“-不同，位置在键盘中数字键“1”的左边，不是引号！" class="headerlink" title="注意 “ ` “ 与 “ ‘ “ 不同，位置在键盘中数字键“1”的左边，不是引号！"></a>注意 “ ` “ 与 “ ‘ “ 不同，位置在键盘中数字键“1”的左边，不是引号！</h3><p>单行<code>高亮</code>显示，多行格式化代码：<br>```<br>#import a.h<br>if (a &gt; 3) {<br>printf(“yes”);<br>}<br>```</p><pre><code>#import a.hif (a &gt; 3) {printf("yes"); //代码注解}</code></pre><hr><h2 id="“-“-表示无序序列"><a href="#“-“-表示无序序列" class="headerlink" title="“ - “ 表示无序序列"></a>“ - “ 表示无序序列</h2><p>- 第一天<br>下海捉鱼<br>- 第二天<br>上岛撒欢</p><ul><li>第一天<br>下海捉鱼</li><li>第二天<br>上岛撒欢</li></ul><hr><h2 id="“1-2-3-等”表示有序序列"><a href="#“1-2-3-等”表示有序序列" class="headerlink" title="“1.2.3. 等”表示有序序列"></a>“1.2.3. 等”表示有序序列</h2><ol><li>吃海鲜</li><li>睡帐篷</li><li>打豆豆</li><li>开飞机</li></ol><ul><li>开啤酒</li></ul><ol start="5"><li>打豆豆</li></ol><hr><h2 id="lt-gt-表示网址"><a href="#lt-gt-表示网址" class="headerlink" title="<> 表示网址"></a>&lt;&gt; 表示网址</h2><p>&lt;1260807001@qq.com(邮箱地址)  &gt;<br> <a href="mailto:1260807001@qq.com" target="_blank" rel="noopener">1260807001@qq.com</a></p><hr><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>![图片叫什么](图片的网址)</p><p><img src="http://upload-images.jianshu.io/upload_images/2517476-5c6e85898cc83f30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片叫什么，网址为：http://iconfont.alicdn.com/t/1512879992270.jpg@200h_200w.jpg"></p><hr><h2 id="加文字超链接"><a href="#加文字超链接" class="headerlink" title="加文字超链接"></a>加文字超链接</h2><p>[这是一个带超链接的文字](<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a>)</p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">这是一个带超链接的文字,点击即跳转https://www.baidu.com/</a></p><hr><h2 id="化学式不同平台支持不一，仅做参考"><a href="#化学式不同平台支持不一，仅做参考" class="headerlink" title="化学式不同平台支持不一，仅做参考"></a>化学式不同平台支持不一，仅做参考</h2><p>化学价或平方的写法 = Sad^2^ + H~2~O</p><h4 id="此处不支持-化学价或平方的写法-Sad-2-H2O"><a href="#此处不支持-化学价或平方的写法-Sad-2-H2O" class="headerlink" title="此处不支持 化学价或平方的写法 = Sad^2^ + H2O"></a>此处不支持 化学价或平方的写法 = Sad^2^ + H<del>2</del>O</h4><p>其中“-”减号要注意最好转译 7 - 4 = 3    </p><h4 id="此处不支持-7-4-3"><a href="#此处不支持-7-4-3" class="headerlink" title="此处不支持 7 - 4 = 3"></a>此处不支持 7 - 4 = 3</h4><hr><h2 id="流程图不同平台支持不一，仅做参考"><a href="#流程图不同平台支持不一，仅做参考" class="headerlink" title="流程图不同平台支持不一，仅做参考"></a>流程图不同平台支持不一，仅做参考</h2><pre><code>```flow st=&gt;start: 开始 op=&gt;operation: My Operation cond=&gt;condition: Yes or No? e=&gt;end st-&gt;op-&gt;cond cond(yes)-&gt;e cond(no)-&gt;op &amp;```</code></pre><hr><h3 id="最后放一个不太全的注解"><a href="#最后放一个不太全的注解" class="headerlink" title="最后放一个不太全的注解^_^"></a>最后放一个<a href="https://upload-images.jianshu.io/upload_images/7505161-d574f0af224b7df7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/551" target="_blank" rel="noopener">不太全的注解^_^</a></h3><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>切勿让自己的头脑成为了他人思想的跑马场</title>
      <link href="/2019/11/25/%E5%88%87%E5%8B%BF%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%B4%E8%84%91%E6%88%90%E4%B8%BA%E4%BA%86%E4%BB%96%E4%BA%BA%E6%80%9D%E6%83%B3%E7%9A%84%E8%B7%91%E9%A9%AC%E5%9C%BA/"/>
      <url>/2019/11/25/%E5%88%87%E5%8B%BF%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%B4%E8%84%91%E6%88%90%E4%B8%BA%E4%BA%86%E4%BB%96%E4%BA%BA%E6%80%9D%E6%83%B3%E7%9A%84%E8%B7%91%E9%A9%AC%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="切勿让自己的头脑成为了他人思想的跑马场"><a href="#切勿让自己的头脑成为了他人思想的跑马场" class="headerlink" title="切勿让自己的头脑成为了他人思想的跑马场"></a>切勿让自己的头脑成为了他人思想的跑马场</h2></blockquote><h4 id="香港已经动荡了-10-个月之久；但如果深入了解香港动荡问题本身，我们也可以从-2014-年9-月份的“占领中环”事件算起，那么香港的乱局已经持续了-5-年。但不可否认的是2019-年的-11-月份，香港的动乱达到高潮，反对人士与政府公众部门间的矛盾开始升级到了流血冲突。其实流血冲突在现代社会是任何一个国家，任何一个百姓，任何一个组织领袖都不愿意看到的，这一点我相信只要是有良知的人都会赞同，但是，香港——那个曾经繁荣的香港，为什么一步步走到这种境况中的呢？"><a href="#香港已经动荡了-10-个月之久；但如果深入了解香港动荡问题本身，我们也可以从-2014-年9-月份的“占领中环”事件算起，那么香港的乱局已经持续了-5-年。但不可否认的是2019-年的-11-月份，香港的动乱达到高潮，反对人士与政府公众部门间的矛盾开始升级到了流血冲突。其实流血冲突在现代社会是任何一个国家，任何一个百姓，任何一个组织领袖都不愿意看到的，这一点我相信只要是有良知的人都会赞同，但是，香港——那个曾经繁荣的香港，为什么一步步走到这种境况中的呢？" class="headerlink" title="香港已经动荡了 10 个月之久；但如果深入了解香港动荡问题本身，我们也可以从 2014 年9 月份的“占领中环”事件算起，那么香港的乱局已经持续了 5 年。但不可否认的是2019 年的 11 月份，香港的动乱达到高潮，反对人士与政府公众部门间的矛盾开始升级到了流血冲突。其实流血冲突在现代社会是任何一个国家，任何一个百姓，任何一个组织领袖都不愿意看到的，这一点我相信只要是有良知的人都会赞同，但是，香港——那个曾经繁荣的香港，为什么一步步走到这种境况中的呢？"></a>香港已经动荡了 10 个月之久；但如果深入了解香港动荡问题本身，我们也可以从 2014 年9 月份的“占领中环”事件算起，那么香港的乱局已经持续了 5 年。但不可否认的是2019 年的 11 月份，香港的动乱达到高潮，反对人士与政府公众部门间的矛盾开始升级到了流血冲突。其实流血冲突在现代社会是任何一个国家，任何一个百姓，任何一个组织领袖都不愿意看到的，这一点我相信只要是有良知的人都会赞同，但是，香港——那个曾经繁荣的香港，为什么一步步走到这种境况中的呢？</h4><a id="more"></a><blockquote><h2 id="Into-the-fray"><a href="#Into-the-fray" class="headerlink" title="Into the fray!"></a>Into the fray!</h2><p>若想解决纷争，必先陷入纷争！</p></blockquote><p>　　<br>作为一个接受马克思主义教育的，坚信大学成绩及格就好的，中部地区普通家庭培养下的，一个二十五六岁的，普普通通的大陆青年，我书读的不多，但讲道理还是可以让我明白，我自然也是相信现代媒体行业的基本价值观念，必须深入现场，才有权发声。好在现代社会的网络媒体已经无孔不入，让我这个远在大陆的普通青年也能从不同的角度收集到不同阵营的不同价值观念与 N 手资料。先说现象，再说结论，最后如果你有耐心的话，可以听我给你分析原因。</p><hr><p>一、现象</p><ul><li>香港现象<br>暗流涌动，“群情激奋”，网络与线下一体，“去中心化”。<br>高呼口号，“光复”，“革命”，“民主”，“SOS”等口号占据主流。<br>反对人士“全副武装”，重点地区公共设施（地铁，道路，商店，学校，餐饮店铺）被破坏严重（至于哪些是重点地区，大家可以自己想象嘛），逃避警察抓捕，并要求释放已被抓捕的反对人士。</li></ul><ul><li>大陆现象<br>中央电视台及部分地方频道会在新闻版块播出最新动态，并且附带领导层面的批评和谴责，最后声援特区政府，呼吁特区人民注意安全和理性对待。整体来看比澳洲山火的报道略显重要。<br>大陆百姓早把香港动乱当作茶余饭后的谈资，但态度基本一致，无外乎 “整他丫的！”“傻逼废青！”较为深度的评论就是“操蛋的美国势力”。<br>大多数人认为香港问题就是西方势力渗透——“帝国主义亡我之心不死”的表现，进而影响了一部分激进的香港青年，进一步演变为攻击政府的造反行为。所有人都相信中国政府有能力解决香港问题，外国势力不可能分裂香港领土。</li></ul><p>二、结论</p><ol><li>香港问题不影响中国大陆继续平稳较快发展，不可能动摇中国的崛起步伐。</li><li>大陆会继续保持表面的克制，但会以此为契机把更大更好的鸡蛋，放在更加结实的篮子里。</li><li>大陆不会就领土问题做出任何妥协。</li><li>透过表象看实质，中国与美国已经坐上了大国对弈的台子上，可以预见，对决才刚刚开始。</li><li>香港反对人士一定意义上推动了现代政治进程，我相信会有一届更好的政府来管辖香港，但类似日本、台湾的乱政不会发生在香港。</li><li>香港问题不会引发军事冲突，可能会影响香港金融中心地位。</li></ol><p>三、分析</p><p>不得不承认，中国尤其是中国大陆在国际舆论舞台上长期处于劣势，以自由言论标榜自身的西方媒体一方面团结一致的呛声大陆，一方面又嘲讽中国无力反驳。</p><p>这就好比一方是口直心快且字字诛心的西方长舌妇，一方是待人和善为人谦和的东方儒生，我想每每这儒生看到这摊浑水，自会摇头叹息，避之不及。西方所标榜的自由舆论，我们看来是娃娃斗嘴，真想等你们智商完全上线之后再与之探讨。理智永远是成功决策的前提条件，下面将给出我的分析。</p><p>首先你要了解颜色革命和西方民主制度，政治制度的选择不是简单的站队或者多选题，政治是会死人的。</p><p>政治的确立就是通过不同团体间的抗争，最后一个成为“王”，一个死为“灰”。特别是美苏争霸时期，资本主义与社会主义的对立，几乎是把地球劈成两半，并给这两部分的人民留下了深入基因的烙印，这也是为什么俄罗斯即使选择了资本主义，仍然被整个西方社会遗弃，他的烙印还在，他就是假想敌！</p><p>中国也曾做过这道选择题，中国民主革命的先驱——孙中山先生，至今仍然被所有中国人尊为“国父”。但就像不是所有的鞋都适合自己的脚，只有试试才会知道哪一个更适合中国人。</p><p>中国也曾在社会主义的道路上绕过弯路，开过倒车，我们不得不承认决定人类历史的真的只是少数人。中国足够幸运，简单来说就是从马克思、列宁老师那里多加了几个字——“中国特色”，然而这几个字却是无数血和泪的教训，邓小平说过，路要怎么走？ ——摸着石头过河嘛~</p><blockquote><p>“西方民主”对于中国来说，并不是最优解。</p></blockquote><p>中国从来不否认民主的进步意义，但生搬硬套西方的民主，只会为世界创造 14 亿难民。中国有着世界上最多的国民人口，中国有着几乎与整个欧洲齐平的领土面积，中国有着5 倍于美国的人口密度，最重要的是，中国有超越所有国家的文明史厚度，有着 5000 年生活在同一块土地上的民族感情。所以中国的政治决策是排外的——中国的事情必须由中国人决定，同时中国的对外态度是公开的——开放包容。看似矛盾，但足以表明中国的政治立场：首先老子的事情自己说了算。</p><p>其实在香港之前，中国就已经判断所谓的“西方民主”只是一个陷阱了。</p><hr><p>让我们进入上帝视角——</p><p>“阿拉伯之春”的发生地——突尼斯。2009年6月，维基解密流出了三份关于突尼斯总统本⋅阿里的电文。其中一份“披露”了本⋅阿里家族控制着整个国家的经济；另一份电文则绘声绘色地描述了在本⋅阿里女婿豪宅里举办的一次宴会，宅邸里的文物随处可见，客人们享用着私人飞机从法国空运来的牛奶……第三份电文《突尼斯的腐败：你的就是我的》则直言：无论是现金、土地、房屋还是奢侈品，只要是总统家族成员看上的，最终都得落入他们手中。这些电文很快在社交网络上传播开来，突尼斯民众愤愤不已，一传十，十传百，不久就纷纷走上街头进行抗议。眼看事态有可能平息，一起自杀事件将突尼斯局势推向了深渊——12月17日，一个小贩突然声称被警察暴力执法，当街自焚以示抗议，伤重不治而亡。自焚事件发生后，几个账号突然在社交网络上疯狂转发小贩被烧焦的照片，引发了民众对政府的怒火，全国各地爆发大规模骚乱，警民冲突持续将近1个月。示威者包围了中央政府在各地的派驻机构，向派驻机构办公地点投掷石块和燃烧瓶，并试图冲破警方设置的警戒线。一些示威者还持械攻击了加油站、警察局和其他政府机构。地方治安武装力量在鸣枪示警无效后，被迫开枪自卫。自焚事故让原本平和的抗议变成了全国的大暴动，最终造成局面的不可控。突尼斯小贩的那一把火点燃了整个阿拉伯世界，引发了“阿拉伯之春”。</p><hr><p>上帝视角到此结束，突尼斯也逐步恢复稳定，这时再让我们来看看西方媒体的视角——</p><p>美国及西方国家一片欢呼，宣布伟大的西方民主模式降临到了阿拉伯世界。我印象尤为深刻的是一个美国名人身披防弹衣来到成为一片废墟的市区，艰难的穿过瓦砾杂物堆砌的道路，她采访了一个拾垃圾的小男孩，小男孩高兴的告诉她战争终于结束了，他又可以快乐的生活了。这个美国人最后感叹道：“虽然你失去了家园，但你收获了自由和民主。”说实在作为一个诞生在和平国家的人，我真的无法理解这样的行为。</p><hr><p>大陆媒体的视角——</p><p>大陆媒体认为西方推崇的所谓“民主化”，并没有给阿拉伯国家带来繁荣稳定，反而导致更严重的政治腐朽和经济恶化。突尼斯在“颜色革命”后经过了数年转型，结果是通货膨胀率、政府负债率和货币贬值速度呈“滚雪球式”攀升。很多年轻人失业无助，参加“伊斯兰国”的人数是阿拉伯国家之最。其他“阿拉伯之春”涉及的国家，一个个皆是政治混乱、社会失序、经济动荡。更为严重的是，恐怖组织渗透，极端组织生长，犯罪率逐年增加。</p><hr><p>这也是为什么大陆坚信香港问题的背后必然有西方势力插手，且不说各种小报所报道的各个反对人士领袖的外国经历和资金动向，但就香港动荡过程的相似度来看，结果不言而喻。这里我想要警告其他国家的是，中国作为世界上第一大开放市场国家，第二大经济体，第三大军事体，以美国为首的某些国家还有能力、有胆量进行“颜色革命”，企图干扰中国的正常发展，如果其他国家不引以为戒，仍心怀侥幸，无论中美最终如何，就试问香港之类事件发生在你的祖国，以你的国家实力来看是否能平稳应对？如果你认为自己与美国利益一致，美国不会搞你，那么如果你成为美国手中棋子不小心被丢车保帅，那么你认为你能承受另一方的进攻吗？中国体量巨大，但整体实力不如美国，中美关系已从战略合作，转变为战略竞争。所以面对美国的压力，中国早有心理准备，可以毫不遮拦的说，当今世界如果说是一张棋盘的话，真正下棋的只有中美两国，虽然两国关系仍达不到剑拔弩张的节点，但各处的明争暗斗已经逐渐明了，不再藏着掖着。中国和美国的决策层都是数一数二的智者，我坚信一个国家的上层建筑不管被民间嘲讽的多么腐朽和无能它在实际中真的很难做到愚蠢，因为有太多的眼睛在监督，有太大的责任在肩负，有太多的聪明的大脑在出谋划策，如今是 21 世纪，不再是中世纪那个一人说了算的君主时代。真的无法相信还有一些香港人仍希望匍匐到伊丽莎白女王的裙下，真的无法想象那将是怎样的一幅画面···</p><p>香港的反对人士在大陆被称为“废青”，意思是废物青年。但也不能完全说就是他们的错，客观来讲，的确如他们所言，“哪里有压迫，哪里就有反抗”，只不过这群废物分辨是非对错能力有限，容易被“自由言论”所诱导，缺乏独立思考能力和自我领导精神。我这里并不是在骂“黄、陈方”等那些明目张胆的狗腿子，因为他们这些所谓的精神领袖最起码自己是清醒的，他们组织废青们反抗，目的是达到自己的目的，实现自己主人的政治目标。可以这群废青不一样，他们很多是高校的激进学生，或是企业的正常员工，他们接受过正常的教育，拥有着分析看待问题的能力，正常的游行抗议怎么会演变为流血冲突，这些香港废青有着不可推卸的责任。大陆经常有句开玩笑的话叫“别人把你给卖了，你还乐呵呵的帮别人数钱呢”，对于充斥在香港大街小巷“自由”“民主”的气氛，对于把载有乘客的地铁逼停，对于把警车路障焚毁以表示“请愿”的香港，也许这些废青并不属于这块土地，也许他们每一个都同时拥有一张美国绿卡，也许他们每一个都不需要工作，不需要吃饭，不需要生活。当然也有许多人在公众场合支持这些废青的所作所为：</p><p>比如台湾地区的民族进步党当局蔡英文说：“自由就像空气一样，只会在窒息时，才会察觉它的存在。” 我觉得自由也像打嗝一样，有些人吃的太饱的时候，也会察觉到它的存在。</p><p>美国国会众议院议长佩洛西公开宣称，发生在香港的示威游行是“一道美丽的风景线”。当然这样美丽的风景线不久后发生在“自由灯塔”——美国后，“格杀勿论”可一直是美国警察的格言。</p><p>中国不是苏联，中国不是叙利亚，中国不是突尼斯，中国经济上不畏惧美国，中国军事上可以承诺御敌以外，中国政治上廉洁奉公。再加上中国共产党执政为民的传统，实事求是的理念，军民一心的现实，如今中国的“香港”明明被闹的沸沸扬扬，然而中国却无动于衷，那么我们有理由相信这是暴风雨前的宁静，这是放大招之前的技能读条，废青们，勿谓言之不预也~</p><p>中国中小学生都会对这个名词有一个模糊的印象——“革命乐观精神”，这个词解释起来比较费劲，小孩子也不是很能理解，但几乎所有中国人，都对这个名词理解越来越深。从红军长征时期的《一双草鞋》《一块牛膝骨》，到新中国成立前夕的“俱往矣，数风流人物还看今朝”，再到抗美援朝时期的“一切反动派都是纸老虎”···中国的民族自信心在随着共和国一起成长。可是我们可怜的香港特别行政区同胞缺乏这样的精神，他们早年被大英帝国奴隶欺压了 150 多年，英帝国通过把持教育资源，将香港人的膝盖牢牢的钉在耻辱柱上，像在印度做的一样。中国人赶走了英国人，重新教香港同胞们站起来，挺直腰杆子做个人。他们的父辈做到了，第一次赚到钱都是自己的！分得土地也是自己的！可是到了下一代这里，他们觉得本来就得这样，钱是自己的，土地也是自己的，膝盖嘛也得是自己的！</p><p>我不禁在脑海中脑补了以下的画面：</p><p>废青们一盘算，你北京说不让跪就不跪吗？你这是不自由！你这是专政！我就要跪，谁不让我跪我就跟谁急眼！</p><hr><p>可是跪谁呢？废青们转念一想，谁是老大我跪谁，来来来，美国别走，听我叫爸爸！</p><hr><p>美国一看，乐了，哎~ 乖儿子，来爸爸赏你两个子。</p><hr><p>废青们也乐了，哈！原来给人家下跪还有的赏钱，北京你别说了，你就是独裁，你就是不自由，哎~ 那谁，爸爸！爸爸哎！！！</p><hr><p>英国瞥了一眼，“好，乖啊~爸爸家里还正分家呢，给你糖自己玩哈。”</p><hr><p>废青们更高兴了，果然，民主的糖就是好吃。快快快，还有谁想做我爸爸？</p><hr><p>美国悔了一步棋，让手下偷偷的跟废青们稍话，“你们去把北京整懵，爸爸这还有巧克力。”</p><hr><p>废青们瞬间高潮了，得咧，爸爸，您瞧好吧，我们给您闹革命。</p><hr><p>美国选了几个专业 CIA训话，“舆论为主，培训为辅，造反不用教，这群大学生学的比狗都快。”</p><hr><p>北京推了推眼镜一脸的黑线，“广东，要不你去看一下水龙头是不是有点松··· ”</p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用总结</title>
      <link href="/2019/11/25/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/25/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="首次使用-git-或长期未使用-git-导致-ssh-秘钥过期"><a href="#首次使用-git-或长期未使用-git-导致-ssh-秘钥过期" class="headerlink" title="首次使用 git 或长期未使用 git 导致 ssh 秘钥过期"></a>首次使用 git 或长期未使用 git 导致 ssh 秘钥过期</h2><h3 id="添加ssh钥匙"><a href="#添加ssh钥匙" class="headerlink" title="添加ssh钥匙"></a>添加ssh钥匙</h3><p>1.在finder 中 <code>command+shift+G</code> 查找<code>~/.ssh</code> 目录，如果有<code>id_rsa.pub</code>文件。则可以直接使用，使用text 打开，从头复制id_rsa.pub里的内容（末尾的邮箱或提示文字不需要），粘贴在GitHub库的-settings-keys下，Title 就是邮箱。</p><p>2.如果没有，则需要初始化创建 RSA 文件。在 terminal 中切换到用户目录下，之后运行</p><p><code>ssh-keygen -t rsa -C "*****@qq.com" //github所使用的的邮箱名</code></p><p>成功后会生成<code>id_rsa</code>和<code>id_rsa.pub</code>文件。参考 1. 复制.pub内容到 GitHub setting 里面即可。</p><p>3.在 terminal 中切换到合适的代码存放位置。Linux 创建目录（文件夹）语句<code>mkdir aaa</code></p><a id="more"></a><p>4.<code>git init</code>初始化仓库</p><p>下面两句一般网页上有具体的值，可以根据实际情况直接复制使用。</p><p>5-1.<code>git remote add origin git@server-name:path/repo-name.git</code> 关联远程仓库。</p><p>一般远程没有内容；本地可能有内容，也可能没内容，简单的关联。</p><p>5-2.<code>git clone git@server-name:path/repo-name.git</code>克隆远程仓库。</p><p>一般为远程有内容；本地没内容，或本地内容需要被远程内容覆盖掉时，从远程下载下来。</p><h2 id="一般常用操作"><a href="#一般常用操作" class="headerlink" title="一般常用操作"></a>一般常用操作</h2><pre><code>git config --local --list   查询当前Git配置git config user.namegit config user.email 查询当前的 用户名 /邮箱</code></pre><hr><pre><code>git branch -a 查看本地+远程的所有分支git pull --rebase origin master  在远端的基础上拉取最新内容，用于首次 push 不成功的情况</code></pre><hr><pre><code>git status  最常用的，查看当前工作区|缓存区git diff  balabala.text 查看《balabala.text》文件工作区与缓存区的不同地方git add  balabala.text  把当前工作区的《balabala.text》文件添加到缓存区git commit -m "每次提交必须带描述"  把当前缓存区的全部内容提交为一个版本以上两步可以合并，但不推荐(因为它会把更新提交，新增默认不存入缓存区不会被提交)git commit -m "合并时容易遗忘添加文件，只能下一次提交" -a 把当前“变更”【不包含增加】添加到缓存区并进行提交//***********push前发现描述文字错误，或修改上次提交的描述文字*************git commit --amend  查看并修改上一次，且为最近的上一次的提交内容，使用vi修改git push  把本地仓库推送到远程仓库git log --pretty=oneline  打印所有历史操作，可以快捷查看每个操作的缩略码git reflog 打印所有的命令记录（主要是从未来回到过去后，用log无法找到未来的id）git reset --hard  (6位id值)  回退到某一ID对应的版本（既可以是过去，也可以是未来）git rm bala.text  删除缓存区内的《 bala.text》文件git checkout -- bala.text  用缓存区的《bala.text 》文件替换工作区对应《bala.text 》文件的内容。</code></pre><ul><li>就这一点来看，可以有“删除当前内容”和“回退之前内容”两种结果。未add时，删除当前工作区的内容很容易理解;回退 的话要与  <code>git reset --hard</code> (过去正确的版本id) 联合使用，先回退版本，再checkout该文件，就回退到了该文件还存在的时刻。</li></ul><h2 id="与分支相关的操作"><a href="#与分支相关的操作" class="headerlink" title="与分支相关的操作"></a>与分支相关的操作</h2><h3 id="分支间切换"><a href="#分支间切换" class="headerlink" title="分支间切换"></a>分支间切换</h3><pre><code>git checkout -b  newBranch-001 等于下两句git branch newBranch-001  新建一个名叫《newBranch-001》的分支git checkout  newBranch-001  当前分支切换至《newBranch-001》分支git branch  查看所有的分支（同时当前所在的分支会被加*号表示 ）git checkout  aBranch-002 切换分支</code></pre><h3 id="合并分支（特别是往-master-分支上合并新开发完成的-issue-）"><a href="#合并分支（特别是往-master-分支上合并新开发完成的-issue-）" class="headerlink" title="合并分支（特别是往 master 分支上合并新开发完成的 issue ）"></a>合并分支（特别是往 master 分支上合并新开发完成的 issue ）</h3><blockquote><p>合并分支需要确定一个概念:<br>主分支用【master】表示； 次要分支用【Issue】表示</p><blockquote><p>把Issue合并到master之中， 必须   首先把当前分支切换至目标分支，即master之上</p></blockquote></blockquote><pre><code>git merge Issue-001  把《Issue-001》分支内容合并到当前分支之中git branch -d Issue-001 删除《Issue-001》分支git branch -r -d Issue-001 删除《origin/Issue-001》远程分支</code></pre><h3 id="合并时常常需要解决冲突"><a href="#合并时常常需要解决冲突" class="headerlink" title="合并时常常需要解决冲突"></a>合并时常常需要解决冲突</h3><p>可以使用vim 直接操作，（Vim 语法传送门）也可以点击进入文件手动更改。</p><p><code>vi a.rtf</code></p><p>在需要的地方 <code>dd</code>（删除）</p><p>最后 <code>:wq</code>(保存并退出)</p><p> 然后就可以顺利的重新提交 <code>add  commit</code>了</p><h3 id="合并操作人为出错或强行合并操作"><a href="#合并操作人为出错或强行合并操作" class="headerlink" title="合并操作人为出错或强行合并操作"></a>合并操作人为出错或强行合并操作</h3><pre><code>git log --graph --pretty=oneline --abbrev-commit 以缩略图形式，展示分支合并信息/*  把本地分支嫁接到某一远端分支节点 git fetchgit reset --hard origin/isuue-100 </code></pre><hr><h2 id="最后记录一下版本合并的原则。"><a href="#最后记录一下版本合并的原则。" class="headerlink" title="最后记录一下版本合并的原则。"></a>最后记录一下版本合并的原则。</h2><p><code>Origin</code>远端仓库，不解释</p><p><code>Master</code> 权高位重，可以认为是“成熟版本”的记录者，它的每一次节点的更替，都意味着一个“经得起线上检验的”版本。面向版本，而不是面向功能。</p><p><code>Develop</code> 战线最长，面向功能。可以认为是“完整新功能”的记录者，它的每一次节点更替，意味着一个“完整的功能”。一个版本可以有若干新旧功能。</p><p><code>Future</code> 一般用于打某几个功能的较完整的测试包。比如开发周期为两周，第一周只完成ABC三个功能，D功能完成一半，就先把ABC merge 到Future中，查看整体效果，或用于展示。最终Future将在功能测试后销毁，不建议合并至Develop中！</p><p><code>Issue</code> 分支，面向功能模块，(或者说面向文件，尽可能只修改某一功能所涉及的某几个文件，尽量避免因不同的Issue修改同一文件而造成的合并冲突)可能包含一个或多个近似功能实现。需要就开辟，弃用即销毁，完成就rebase merge 到Develop中，实现 “某一功能开发完成”，或“针对性修改某一单一功能”的目的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux+Vim常用操作</title>
      <link href="/2019/11/25/Linux-Vim%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/25/Linux-Vim%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>#####注意 “—&gt;”【】均为便于读者记忆的解释</p><a id="more"></a><hr><blockquote><p>Linux文件/路径操作</p></blockquote><p>基础跳转：  <code>cd    /User/name/Document/myCode</code> 跳转到某一路径<br>基础回跳：</p><ul><li><code>cd  ..</code>  回到上一级目录, </li><li><code>cd  ~</code>  回到HOME目录,</li><li><code>cd  -</code>    查看所在目录。</li></ul><p>新建文件  <code>touch   aa.txt</code>   还有另一种思路<code>vim aa.txt</code> 但是记住<code>:wq</code>保存退出，将自动在当前目录新建该文件<br>新建文件夹:<code>mkdir   myFile</code>【myFile是文件夹名称，可任意】<br>修改文件名称:<code>mv  西游记.txt(原文件名)  新三国.jpg(新的文件名)</code> —&gt; move A (to) B<br>删除某一路径下的文件<code>rm a.txt</code><br>注意若删除某一文件夹的所有文件，应该使用循环遍历删除: </p><h2 id="rm-rf-User-name-Document-岛国风光"><a href="#rm-rf-User-name-Document-岛国风光" class="headerlink" title="rm -rf  /User/name/Document/岛国风光"></a><code>rm -rf  /User/name/Document/岛国风光</code></h2><blockquote><p>—–VIM—–对于Vim的操作一定要基于英文输入法，用汉语输入是一种既low又召bug的行为</p></blockquote><p>编辑文件：<code>vi  a.rtf</code><br>进入编辑状态：<code>i</code><br>退出编辑状态：<code>ESC</code></p><p>退出vi 编辑有三种方式:【注意先按ESC退出编辑模式 :也是关键字】</p><ul><li>:q                           【无操作退出，无修改时用】</li><li>:q!                          【不保存退出，搞得乱七八糟时候用】</li><li>:wq 或者 :x  【保存并推出，有一定操作且需要保存时用】</li></ul><p>查找某一内容：<code>/word</code>  【查询内容为“word”的地方】—&gt;这里可以类比全局搜索Ctrl + F ，特别是查找Git冲突“&gt;&gt;&gt;&gt;&gt;”时最为常用</p><p>复制光标所在的一整行 : <code>yy</code><br>删除光标所在的一整行 : <code>dd</code></p><p>粘贴剪切板内容：<code>p</code><br>回退刚才操作    ：<code>u</code></p><hr><blockquote><p>关于vim的进阶用法</p></blockquote><hr><p>显示行号<code>:set nu</code><br>隐藏行号 <code>:set nonu</code> 　<br>翻到下一页（向前翻页）<code>Ctrl + f</code>   —-&gt; f(ront)<br>翻到上一页（向后翻页）<code>Ctrl + b</code>  —-&gt; b(ack)<br><code>Ctrl + u</code>       向前翻半页</p><h2 id="Ctrl-d-向后翻半页"><a href="#Ctrl-d-向后翻半页" class="headerlink" title="Ctrl + d     向后翻半页"></a><code>Ctrl + d</code>     向后翻半页</h2><blockquote><p>对于 复制/删除 的进阶用法</p></blockquote><p><code>dd</code>        删除光标所在行    —-&gt;del dir<br><code>dw</code>        删除单词到尾部（包括空格）—-&gt;del word<br><code>de</code>        删除单词到尾部（不包括尾部空格）—-&gt;del end<br><code>d$</code>        删除当前到行尾的所有字符  —-&gt;del $(代表尾部)<br><code>d^</code>        删除当前到行首的所有字符 —-&gt;del ^(代表行首)<br>单行删除：<code>1d</code> —-&gt;（1为待删除行）<br>多行删除：<code>1,10d</code><br>光标所在行以下的N行:   <code>Ndd</code></p><p><code>yy</code>        复制光标所在行到vi缓冲区<br><code>yw</code>        复制单词到尾部（包括空格）<br>//  <code>ye</code>        复制单词到尾部（不包括尾部空格）待检验<br><code>y$</code>        复制当前到行尾的所有字符<br><code>y^</code>        复制当前到行首的所有字符 </p><hr><p>这些都是常用的vi 语句，知道这些足够对付git 了，当然想了解更多的话，可以参考这篇文章：</p><blockquote><p><a href="https://www.jianshu.com/p/e66ae3add58d" target="_blank" rel="noopener">vi(vim)的常用操作</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python的学习记录</title>
      <link href="/2019/11/25/Python%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/11/25/Python%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-是一种跨平台的解释性脚本语言。它强制缩进、简单易学、免费开源、拥有强大内库。定位是：可用于Web-科学计算-人工智能-桌面界面-前端-后端"><a href="#Python-是一种跨平台的解释性脚本语言。它强制缩进、简单易学、免费开源、拥有强大内库。定位是：可用于Web-科学计算-人工智能-桌面界面-前端-后端" class="headerlink" title="Python 是一种跨平台的解释性脚本语言。它强制缩进、简单易学、免费开源、拥有强大内库。定位是：可用于Web/科学计算/人工智能/桌面界面/前端/后端"></a>Python 是一种跨平台的解释性脚本语言。它强制缩进、简单易学、免费开源、拥有强大内库。定位是：可用于Web/科学计算/人工智能/桌面界面/前端/后端</h1><a id="more"></a><p><img src="https://i.loli.net/2019/11/28/QfcvlnP3FiM2ad4.jpg" alt="art-y.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MacOS中程序员常用工具</title>
      <link href="/2019/11/25/MacOS%E4%B8%AD%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/11/25/MacOS%E4%B8%AD%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="MacOS-Computer-Useful-Tools"><a href="#MacOS-Computer-Useful-Tools" class="headerlink" title="MacOS Computer Useful Tools"></a>MacOS Computer Useful Tools</h1><h2 id="Homebrew-是一款-MacOS-平台下的软件包管理工具。"><a href="#Homebrew-是一款-MacOS-平台下的软件包管理工具。" class="headerlink" title="Homebrew 是一款 MacOS 平台下的软件包管理工具。"></a>Homebrew 是一款 MacOS 平台下的软件包管理工具。</h2><p>使用户不必关心依赖和文件路径的情况下，快速安装，更新，卸载，查看 各种工具包/软件。<br>使用前提（MacOS、Xcode、Intel CPU）</p><hr><h2 id="Cocopods-是一款-MacOS-平台下最常用的-iOS-类库管理工具。"><a href="#Cocopods-是一款-MacOS-平台下最常用的-iOS-类库管理工具。" class="headerlink" title="Cocopods 是一款 MacOS 平台下最常用的 iOS 类库管理工具。"></a>Cocopods 是一款 MacOS 平台下最常用的 iOS 类库管理工具。</h2><p>使用户在开发 iOS 应用时方便的 导入，导出，管理 各种第三方开源类库。<br>使用前提（MacOS、Xcode、Ruby）</p><a id="more"></a><h2 id="便于安装的一些iOS必备软件"><a href="#便于安装的一些iOS必备软件" class="headerlink" title="便于安装的一些iOS必备软件"></a>便于安装的一些iOS必备软件</h2><p><a href="http://www.cocoachina.com/special/xcode/#block4" target="_blank" rel="noopener">http://www.cocoachina.com/special/xcode/#block4</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ruby的简单介绍</title>
      <link href="/2019/11/24/Ruby%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/11/24/Ruby%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Ruby-是一种面向对象的编程语言，它免费开源、通用、解释性、定位是——服务器端脚本语言。"><a href="#Ruby-是一种面向对象的编程语言，它免费开源、通用、解释性、定位是——服务器端脚本语言。" class="headerlink" title="Ruby 是一种面向对象的编程语言，它免费开源、通用、解释性、定位是——服务器端脚本语言。"></a>Ruby 是一种面向对象的编程语言，它免费开源、通用、解释性、定位是——服务器端脚本语言。</h1><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML相关使用</title>
      <link href="/2019/11/20/HTML%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/20/HTML%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-Hyper-Text-Markup-Language-超文本标记语言"><a href="#HTML-Hyper-Text-Markup-Language-超文本标记语言" class="headerlink" title="HTML (Hyper Text Markup Language) 超文本标记语言"></a>HTML (Hyper Text Markup Language) 超文本标记语言</h1><h2 id="Hyper-Text"><a href="#Hyper-Text" class="headerlink" title="Hyper Text"></a>Hyper Text</h2><p>超文本是一种信息组织方式。使用超链接（URL）的方式，将本地某一文件中的信息（包括：文字，图表，图片，声音，等）与其他文件 或是 地理位置上很远的某台计算机上的文件信息，随机的链接起来，为人们查找、检索提供方便。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>超文本标记语言是通过一系列、对应的标签对（如：&lt;html&gt; ··· &lt;/html&gt;） ，以及文本信息，所组成的。</p><a id="more"></a><p><img src="https://i.loli.net/2019/11/28/BG6i4xLtr3a87Y5.png" alt="Screen Shot 2019-11-27 at 16.16.48.png"></p><h2 id="JavaScript-（简称“JS”）"><a href="#JavaScript-（简称“JS”）" class="headerlink" title="JavaScript （简称“JS”）"></a>JavaScript （简称“JS”）</h2><p>是一种轻量级的、解释性的动态编程语言。<br>JS 最初作为脚本语言用来开发Web 页面，后来作为动态语言也被用于非浏览器环境。<br>日常用途：<br>1.嵌入动态文本，用于 HTML 页面<br>2.对浏览器的事件做出响应（如：点击 -&gt; 弹出对话框）<br>3.读写 HTML 元素<br>4.对需要提交到服务器的数据进行验证<br>5.检测访客的浏览器信息<br>6.控制 cookie，包括创建和修改<br>7.基于 Node.js 进行服务器端编程</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>申请国外地区的apple—id下载Pokémon-GO</title>
      <link href="/2019/10/08/%E7%94%B3%E8%AF%B7%E5%9B%BD%E5%A4%96%E5%9C%B0%E5%8C%BA%E7%9A%84apple%E2%80%94id%E4%B8%8B%E8%BD%BDPokemon-GO/"/>
      <url>/2019/10/08/%E7%94%B3%E8%AF%B7%E5%9B%BD%E5%A4%96%E5%9C%B0%E5%8C%BA%E7%9A%84apple%E2%80%94id%E4%B8%8B%E8%BD%BDPokemon-GO/</url>
      
        <content type="html"><![CDATA[<h3 id="对于一个坚持社会主语核心价值观的，-21-世纪，有理想，有道德，最重要的是有明辨是非能力的，好少年，有时候我们也需要获取一些墙外的内容，边批判边学习。"><a href="#对于一个坚持社会主语核心价值观的，-21-世纪，有理想，有道德，最重要的是有明辨是非能力的，好少年，有时候我们也需要获取一些墙外的内容，边批判边学习。" class="headerlink" title="对于一个坚持社会主语核心价值观的， 21 世纪，有理想，有道德，最重要的是有明辨是非能力的，好少年，有时候我们也需要获取一些墙外的内容，边批判边学习。"></a>对于一个坚持社会主语核心价值观的， 21 世纪，有理想，有道德，最重要的是有明辨是非能力的，好少年，有时候我们也需要获取一些墙外的内容，边批判边学习。</h3><h3 id="这也是为什么我们的墙看似冷漠但又留下了各种高门槛的梯子，良心与客观便是爬上梯子最基本的门槛。"><a href="#这也是为什么我们的墙看似冷漠但又留下了各种高门槛的梯子，良心与客观便是爬上梯子最基本的门槛。" class="headerlink" title="这也是为什么我们的墙看似冷漠但又留下了各种高门槛的梯子，良心与客观便是爬上梯子最基本的门槛。"></a>这也是为什么我们的墙看似冷漠但又留下了各种高门槛的梯子，良心与客观便是爬上梯子最基本的门槛。</h3><a id="more"></a><p><img src="https://i.loli.net/2019/11/28/kH3WQfit6wyd1GP.png" alt="IMG_7977.PNG"></p><h2 id="前提需要科学上网"><a href="#前提需要科学上网" class="headerlink" title="前提需要科学上网"></a>前提需要科学上网</h2><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MacOS上安装/更新CocoaPods教程</title>
      <link href="/2017/10/01/MacOS%E4%B8%8A%E5%AE%89%E8%A3%85-%E6%9B%B4%E6%96%B0cocopods%E6%95%99%E7%A8%8B/"/>
      <url>/2017/10/01/MacOS%E4%B8%8A%E5%AE%89%E8%A3%85-%E6%9B%B4%E6%96%B0cocopods%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="版本太低更新教程"><a href="#版本太低更新教程" class="headerlink" title="版本太低更新教程"></a>版本太低更新教程</h1><pre><code>$ pod --version1.5.3$ sudo gem update --system     //先更新Ruby-gemPassword:$ sudo gem install cocoapods -n /usr/local/bin  //更新cocoapods$ pod --version1.8.4$ pod update --no-repo-update</code></pre><h3 id="首次使用安装教程点击查看"><a href="#首次使用安装教程点击查看" class="headerlink" title="首次使用安装教程点击查看"></a>首次使用安装教程点击查看</h3><a id="more"></a><h2 id="ERROR-While-executing-gem-…-Gem-FilePermissionError"><a href="#ERROR-While-executing-gem-…-Gem-FilePermissionError" class="headerlink" title="ERROR:  While executing gem … (Gem::FilePermissionError)"></a>ERROR:  While executing gem … (Gem::FilePermissionError)</h2><p>You don’t have write permissions for the /usr/bin directory.</p><pre><code>$ sudo gem install cocoapods -n /usr/local/bin</code></pre><hr><h2 id="可选项：查看进度"><a href="#可选项：查看进度" class="headerlink" title="可选项：查看进度"></a>可选项：查看进度</h2><h3 id="1-在执行pod-install命令时加上参数–verbose即可在终端详细显示安装信息，看到pod目前正在做什么-其实是在安装第三方库的索引-，确认是否是真的卡住。"><a href="#1-在执行pod-install命令时加上参数–verbose即可在终端详细显示安装信息，看到pod目前正在做什么-其实是在安装第三方库的索引-，确认是否是真的卡住。" class="headerlink" title="1.在执行pod install命令时加上参数–verbose即可在终端详细显示安装信息，看到pod目前正在做什么(其实是在安装第三方库的索引)，确认是否是真的卡住。"></a>1.在执行pod install命令时加上参数–verbose即可在终端详细显示安装信息，看到pod目前正在做什么(其实是在安装第三方库的索引)，确认是否是真的卡住。</h3><pre><code>pod install 'ThirdPartyName' --verbose</code></pre><h3 id="2-或者进入终端家目录，输入ls-a可看到隐藏的pod文件夹，输入"><a href="#2-或者进入终端家目录，输入ls-a可看到隐藏的pod文件夹，输入" class="headerlink" title="2.或者进入终端家目录，输入ls -a可看到隐藏的pod文件夹，输入"></a>2.或者进入终端家目录，输入ls -a可看到隐藏的pod文件夹，输入</h3><pre><code>$ cd ~/.cocoapods/$ du -sh</code></pre><h3 id="即可看到repos文件夹的容量，隔几秒执行一下该命令，可看到repos的容量在不断增大，待容量增大至300-M时，说明，repos文件夹索引目录已安装完毕。此时，pod功能即可正常使用。"><a href="#即可看到repos文件夹的容量，隔几秒执行一下该命令，可看到repos的容量在不断增大，待容量增大至300-M时，说明，repos文件夹索引目录已安装完毕。此时，pod功能即可正常使用。" class="headerlink" title="即可看到repos文件夹的容量，隔几秒执行一下该命令，可看到repos的容量在不断增大，待容量增大至300+M时，说明，repos文件夹索引目录已安装完毕。此时，pod功能即可正常使用。"></a>即可看到repos文件夹的容量，隔几秒执行一下该命令，可看到repos的容量在不断增大，待容量增大至300+M时，说明，repos文件夹索引目录已安装完毕。此时，pod功能即可正常使用。</h3><hr><h2 id="可选项：替换源"><a href="#可选项：替换源" class="headerlink" title="可选项：替换源"></a>可选项：替换源</h2><pre><code>$ gem sources -l*** CURRENT SOURCES ***https://rubygems.org/$ gem sources --remove https://rubygems.org/https://rubygems.org/ removed from sources$ gem sources -a https://gems.ruby-china.com/https://gems.ruby-china.com/ added to sources# 查看是否替换源成功$ gem sources -l*** CURRENT SOURCES ***http://gems.ruby-china.com/</code></pre><hr><h2 id="可选项：升级-Ruby"><a href="#可选项：升级-Ruby" class="headerlink" title="可选项：升级 Ruby"></a>可选项：升级 Ruby</h2><pre><code>$ sudo gem update —-systemPassword:</code></pre><hr><h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><h2 id="一、查看CocoaPods-的配置情况"><a href="#一、查看CocoaPods-的配置情况" class="headerlink" title="一、查看CocoaPods 的配置情况"></a>一、查看CocoaPods 的配置情况</h2><pre><code>$ pod --versioncommand not found: pod或1.5.3</code></pre><p>如果报错则表示本机没有安装 CocoaPods ，进入第二步<br>如果有版本号提示，责说明本机已经安装过 CocoaPods ,可以直接忽略“安装教程”，跳转查看“更新教程”或最下面的扩展阅读</p><h2 id="二、检查-Ruby-环境"><a href="#二、检查-Ruby-环境" class="headerlink" title="二、检查 Ruby 环境"></a>二、检查 Ruby 环境</h2><p>因为 CocoaPods 的安装是基于 Ruby 的，所以我们要先把 Ruby 环境配置好。</p><p>查看 ruby 的源地址、版本号，根据实际情况决定是否替换源或升级版本</p><pre><code>$ gem sources -l*** CURRENT SOURCES ***https://rubygems.org/$ ruby -vruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]</code></pre><p>根据实际情况选择性操作</p><ul><li>替换源</li></ul><pre><code>$ gem sources --remove https://rubygems.org/https://rubygems.org/ removed from sources$ gem sources -a https://gems.ruby-china.com/https://gems.ruby-china.com/ added to sourcesg/# 查看是否替换源成功$ gem sources -l*** CURRENT SOURCES ***http://gems.ruby-china.com/</code></pre><ul><li>升级 ruby 版本</li></ul><pre><code>$ sudo gem update -—systemPassword:</code></pre><hr><h2 id="三、安装-CocoaPods"><a href="#三、安装-CocoaPods" class="headerlink" title="三、安装 CocoaPods"></a>三、安装 CocoaPods</h2><pre><code>$ sudo gem install cocoapods Password:# 这里提示让你输入这台电脑的管理员密码# 提示：在终端输入密码不会有提示，光标也不会移动，这是正常的。# 只管正常输入，输完按 Enter 键就好。</code></pre><h3 id="之后会经历漫长的等待…-我一般选择打开电影等待"><a href="#之后会经历漫长的等待…-我一般选择打开电影等待" class="headerlink" title="之后会经历漫长的等待… 我一般选择打开电影等待"></a>之后会经历漫长的等待… 我一般选择打开电影等待</h3><h3 id="安装成功后会提示-Successfully-installed-cocoapods-1-8-4-大致界面如下，文字肯定不一样，仅供参考"><a href="#安装成功后会提示-Successfully-installed-cocoapods-1-8-4-大致界面如下，文字肯定不一样，仅供参考" class="headerlink" title="安装成功后会提示 Successfully installed cocoapods-1.8.4 大致界面如下，文字肯定不一样，仅供参考"></a>安装成功后会提示 <code>Successfully installed cocoapods-1.8.4</code> 大致界面如下，文字肯定不一样，仅供参考</h3><pre><code>$ sudo gem install cocoapods Password:CHANGELOG:  ## 1.8.4  ##### Bug Fixes  * Fixed the Podfile `default_subspec` attribute in nested subspecs.      [Fabio Pelosin][irrationalfab]   \ [#2050](https://github.com/CocoaPods/CocoaPods/issues/2050)  Successfully installed cocoapods-1.8.4  Installing ri documentation for cocoapods-1.8.4 /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/rdoc/rdoc.rb:280: warning: conflicting chdir during another chdir block  /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/rdoc/rdoc.rb:287: warning: conflicting chdir during another chdir block  Done installing documentation for cocoapods after 10 seconds  1 gem installed  </code></pre><h2 id="四、第一次使用"><a href="#四、第一次使用" class="headerlink" title="四、第一次使用"></a>四、第一次使用</h2><h3 id="用命令行-cd-到你需要使用-CocoaPods-管理的-Xcode-工程目录下。"><a href="#用命令行-cd-到你需要使用-CocoaPods-管理的-Xcode-工程目录下。" class="headerlink" title="用命令行 (cd) 到你需要使用 CocoaPods 管理的 Xcode 工程目录下。"></a>用命令行 (cd) 到你需要使用 CocoaPods 管理的 Xcode 工程目录下。</h3><pre><code>$ cd Documents/GitHub/MyProject$ touch Podfile    //(新建一个名称必须为 Podfile 的文件)</code></pre><h3 id="会用-vim-编辑的使用-vim-，不会用的直接鼠标打开"><a href="#会用-vim-编辑的使用-vim-，不会用的直接鼠标打开" class="headerlink" title="会用 vim 编辑的使用 vim ，不会用的直接鼠标打开,"></a>会用 vim 编辑的使用 vim ，不会用的直接鼠标打开,</h3><h3 id="然后往-Podfile-文件中输入以下内容："><a href="#然后往-Podfile-文件中输入以下内容：" class="headerlink" title="然后往 Podfile 文件中输入以下内容："></a>然后往 Podfile 文件中输入以下内容：</h3><pre><code># Uncomment the next line to define a global platform for your projectplatform :ios, '11.0'inhibit_all_warnings!target 'MyProject' do  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks  # use_frameworks!  # Pods for MyProject   pod 'AFNetworking'   pod 'YYKit'   pod 'Masonry'   pod 'MJRefresh'   pod 'FMDB'   pod 'SVProgressHUD'end</code></pre><h3 id="其中要把-MyProject-替换成你的工程的名称"><a href="#其中要把-MyProject-替换成你的工程的名称" class="headerlink" title="其中要把 MyProject 替换成你的工程的名称"></a>其中要把 <code>MyProject</code> 替换成你的工程的名称</h3><h3 id="pod-39-AFNetworking-39-等-这样的语句就是需要导入的第三方库，根据自己的实际需求添加或更改。"><a href="#pod-39-AFNetworking-39-等-这样的语句就是需要导入的第三方库，根据自己的实际需求添加或更改。" class="headerlink" title="pod 'AFNetworking'等 这样的语句就是需要导入的第三方库，根据自己的实际需求添加或更改。"></a><code>pod 'AFNetworking'</code>等 这样的语句就是需要导入的第三方库，根据自己的实际需求添加或更改。</h3><h2 id="五、最后一步——部署"><a href="#五、最后一步——部署" class="headerlink" title="五、最后一步——部署"></a>五、最后一步——部署</h2><h3 id="第一次部署此-Podfile"><a href="#第一次部署此-Podfile" class="headerlink" title="第一次部署此 Podfile"></a>第一次部署此 Podfile</h3><pre><code>pod install --verbose --no-repo-update</code></pre><h3 id="更新此-Podfile"><a href="#更新此-Podfile" class="headerlink" title="更新此 Podfile"></a>更新此 Podfile</h3><pre><code>pod update --verbose --no-repo-update</code></pre><h3 id="然后就可以通过-MyProjectName-Xcodeproj-来打开工程查看结果了。"><a href="#然后就可以通过-MyProjectName-Xcodeproj-来打开工程查看结果了。" class="headerlink" title="然后就可以通过 MyProjectName.Xcodeproj 来打开工程查看结果了。"></a>然后就可以通过 <code>MyProjectName.Xcodeproj</code> 来打开工程查看结果了。</h3><h3 id="（注意以后在通过蓝色的-MyProjectName-xcworkspace-打开运行的话一定会报错的-这里新手容易犯这个错误。）"><a href="#（注意以后在通过蓝色的-MyProjectName-xcworkspace-打开运行的话一定会报错的-这里新手容易犯这个错误。）" class="headerlink" title="（注意以后在通过蓝色的 MyProjectName.xcworkspace 打开运行的话一定会报错的! 这里新手容易犯这个错误。）"></a>（注意以后在通过蓝色的 <code>MyProjectName.xcworkspace</code> 打开运行的话一定会报错的! 这里新手容易犯这个错误。）</h3><h1 id="CocoaPods-语句"><a href="#CocoaPods-语句" class="headerlink" title="CocoaPods 语句"></a>CocoaPods 语句</h1><h2 id="一、使用search命令搜索类库名："><a href="#一、使用search命令搜索类库名：" class="headerlink" title="一、使用search命令搜索类库名："></a>一、使用search命令搜索类库名：</h2><pre><code>$pod search AFNetworking-&gt; AFNetworking (3.2.1)A delightful iOS and OS X networking framework.pod 'AFNetworking', '~&gt; 3.2.1'- Homepage: https://github.com/AFNetworking/AFNetworking- Source:   https://github.com/AFNetworking/AFNetworking.git- Versions: 3.2.1, 3.2.0, 3.1.0, 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0,3.0.0-beta.3, 3.0.0-beta.2, 3.0.0-beta.1, 2.7.0, 2.6.3, 2.6.2, 2.6.1, 2.6.0,2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.1, 2.4.0, 2.3.1, 2.3.0, 2.2.4, 2.2.3,2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3, 2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3, 2.0.0-RC2,2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.1,1.0, 1.0RC3, 1.0RC2, 1.0RC1, 0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0,0.5.1 [master repo]- Subspecs:  - AFNetworking/Serialization (3.2.1)  - AFNetworking/Security (3.2.1)  - AFNetworking/Reachability (3.2.1)  - AFNetworking/NSURLSession (3.2.1)  - AFNetworking/UIKit (3.2.1)....</code></pre><h2 id="二、快速更新库"><a href="#二、快速更新库" class="headerlink" title="二、快速更新库"></a>二、快速更新库</h2><pre><code>pod update --verbose --no-repo-updatepod install --verbose --no-repo-update</code></pre><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><p><img src="https://i.loli.net/2019/12/01/TLnBEKrklOw2GyD.png" alt="Screen Shot 2019-12-01 at 12.13.10.png"></p><p><img src="https://i.loli.net/2019/12/01/wyu6t85fM9oPia1.png" alt="image.png"></p><h2 id="CocoaPods的核心组件"><a href="#CocoaPods的核心组件" class="headerlink" title="CocoaPods的核心组件"></a>CocoaPods的核心组件</h2><p>CocoaPods是用Ruby写的，并划分成了若干个 Ruby-Gem 包。</p><p>CocoaPods在解析执行过程中最重要的几个包的路径分别是：<br><code>CocoaPods/CocoaPods</code><br><code>CocoaPods/Core</code><br><code>CocoaPods/Xcodeproj</code> </p><p>CocoaPods / CocoaPod：这是面向用户的组件，每当执行一个pod命令时，这个组件将被激活。它包括了所有实用CocoaPods的功能，并且还能调用其他gem包来执行任务。 </p><p>CocoaPods / Core：Core gem提供了与CocoaPods相关的文件（主要是podfile和podspecs）的处理。 </p><p>Podfile：该文件用于配置项目所需要的第三方库，它可以被高度定制。本文中我们主要在这里做动作。</p><p>Podspec：该文件描述了一个库将怎样被添加进工程中。.podspec文件可以标识该第三方库所需要的源码文件、依赖库、编译选项，以及其他第三方库需要的配置。 </p><p>CocoaPods / Xcodeproj：这个包负责处理工程文件，它能创建以及修改.xcodeproj文件和.xcworkspace文件。<br>它也可以作为一个独立的包使用，当你要编写修改项目文件的脚本时，可以考虑使用CocoaPods/Xcodeproj。</p><h3 id="简而言之就是，使用-CocoaPods-管理第三方类库后，必需在-Xcode-中用-Xcodeproj-打开工程。"><a href="#简而言之就是，使用-CocoaPods-管理第三方类库后，必需在-Xcode-中用-Xcodeproj-打开工程。" class="headerlink" title="简而言之就是，使用 CocoaPods 管理第三方类库后，必需在 Xcode 中用****.Xcodeproj 打开工程。"></a>简而言之就是，使用 CocoaPods 管理第三方类库后，必需在 Xcode 中用<code>****.Xcodeproj</code> 打开工程。</h3><h3 id="而对于哪一个-哪些第三方类库的引用，只需要以固定格式写在-Podfile文件中，然后用命令行即可一键配置。"><a href="#而对于哪一个-哪些第三方类库的引用，只需要以固定格式写在-Podfile文件中，然后用命令行即可一键配置。" class="headerlink" title="而对于哪一个/哪些第三方类库的引用，只需要以固定格式写在 Podfile文件中，然后用命令行即可一键配置。"></a>而对于哪一个/哪些第三方类库的引用，只需要以固定格式写在 <code>Podfile</code>文件中，然后用命令行即可一键配置。</h3><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发记录</title>
      <link href="/2017/09/15/iOS%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/09/15/iOS%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS开发快捷方式"><a href="#iOS开发快捷方式" class="headerlink" title="iOS开发快捷方式"></a>iOS开发快捷方式</h1><h2 id="Xcode7-0以上打开HTTP权限"><a href="#Xcode7-0以上打开HTTP权限" class="headerlink" title="Xcode7.0以上打开HTTP权限"></a>Xcode7.0以上打开HTTP权限</h2><p>以Open as -&gt;Source Code 的方法打开info.plist文件，然后加入以下代码<br>这段代码放的位置不用固定</p><pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;&lt;dict&gt;    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;    &lt;true/&gt;&lt;/dict&gt;</code></pre><h2 id="关于Cocopods"><a href="#关于Cocopods" class="headerlink" title="关于Cocopods"></a>关于Cocopods</h2><pre><code>pod update --verbose --no-repo-updatepod install --verbose --no-repo-update</code></pre><h2 id="Podfile-默认初始化文本"><a href="#Podfile-默认初始化文本" class="headerlink" title="Podfile 默认初始化文本"></a>Podfile 默认初始化文本</h2><pre><code>platform :ios , '9.0'use_frameworks!inhibit_all_warnings!  ##屏蔽pod一切警告target 'ProjectName’ do  pod 'AFNetworking'  pod 'FMDB'  pod 'MJRefresh'  pod 'ShareSDK3'end</code></pre><a id="more"></a><h3 id="CocoaPods中的头文件import导入时不能自动补齐的解决方法"><a href="#CocoaPods中的头文件import导入时不能自动补齐的解决方法" class="headerlink" title="CocoaPods中的头文件import导入时不能自动补齐的解决方法"></a>CocoaPods中的头文件import导入时不能自动补齐的解决方法</h3><p>选择工程的 Target -&gt; Build Settings 菜单，找到”User Header Search Paths”设置项<br>新增一个值”$(PODS_ROOT)”，并且选择”recursive”，这样xcode就会在项目目录中递归搜索文件</p><h3 id="CocoaPods安装教程"><a href="#CocoaPods安装教程" class="headerlink" title="CocoaPods安装教程"></a>CocoaPods安装教程</h3><h3 id="———-CocoaPods安装教程"><a href="#———-CocoaPods安装教程" class="headerlink" title="———  CocoaPods安装教程"></a>———  <a href="http://kajiter.github.io/2017/10/01/MacOS上安装-更新cocopods教程/">CocoaPods安装教程</a></h3><h2 id="系统默认的字体为："><a href="#系统默认的字体为：" class="headerlink" title="系统默认的字体为："></a>系统默认的字体为：</h2><pre><code>font-family: ".SFUIText-Regular";font-weight: normal;font-style: normal;font-size: 17.00pt</code></pre><h2 id="屏蔽的方法如下"><a href="#屏蔽的方法如下" class="headerlink" title="屏蔽的方法如下:"></a>屏蔽的方法如下:</h2><p>Xcode8里边 Edit Scheme-&gt; Run -&gt; Arguments, 在Environment Variables里边添加<br><code>OS_ACTIVITY_MODE ＝ Disable</code></p><h1 id="关于代码："><a href="#关于代码：" class="headerlink" title="关于代码："></a>关于代码：</h1><h2 id="代码延时调用"><a href="#代码延时调用" class="headerlink" title="代码延时调用"></a>代码延时调用</h2><pre><code>[self performSelector:@selector(aaa) withObject:nil afterDelay:2];// 或者dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(second * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{        [self dismiss];});</code></pre><h2 id="根据格式化标签获取时间"><a href="#根据格式化标签获取时间" class="headerlink" title="根据格式化标签获取时间"></a>根据格式化标签获取时间</h2><h3 id="unix-时间戳转换网站"><a href="#unix-时间戳转换网站" class="headerlink" title="unix 时间戳转换网站 "></a><a href="https://tool.lu/timestamp/" target="_blank" rel="noopener">unix 时间戳转换网站 </a></h3><pre><code>// Unix 时间戳1574870400000 = 北京时间：2019-11-28 00:00:00NSString * unixTime = @"1574870400000";//模拟获得Unix时间戳,注意iOS只可处理10位的时间戳,而Android往往是13位。NSTimeInterval interval = [[unixTime substringToIndex:10] doubleValue];//iOS只能取前10位NSDate * date = [NSDate dateWithTimeIntervalSince1970:interval];NSDateFormatter *format = [[NSDateFormatter alloc] init];[format setDateFormat:@"yyyy年MM月dd日 HH:mm:ss"];NSString *timeBeijing = [format stringFromDate:date];</code></pre><h2 id="输出沙盒路径"><a href="#输出沙盒路径" class="headerlink" title="输出沙盒路径"></a>输出沙盒路径</h2><pre><code>NSLog(@"***%@",NSHomeDirectory());</code></pre><h2 id="设置电量栏格式（白色字体）"><a href="#设置电量栏格式（白色字体）" class="headerlink" title="设置电量栏格式（白色字体）"></a>设置电量栏格式（白色字体）</h2><pre><code>application.statusBarStyle = UIStatusBarStyleLightContent;&lt;key&gt;UIViewControllerBasedStatusBarAppearance&lt;/key&gt;    &lt;false/&gt;</code></pre><h2 id="TextField-注册监听事件"><a href="#TextField-注册监听事件" class="headerlink" title="TextField 注册监听事件"></a>TextField 注册监听事件</h2><pre><code>[[UITextField alloc init] addTarget:self action:@selector(textChange:) forControlEvents:UIControlEventEditingChanged];</code></pre><h2 id="生成某个字符串的大小（自动调节）"><a href="#生成某个字符串的大小（自动调节）" class="headerlink" title="生成某个字符串的大小（自动调节）"></a>生成某个字符串的大小（自动调节）</h2><pre><code>CGSize textSize = [text sizeWithAttributes:@{ NSFontAttributeName : [UIFont systemFontOfSize: textFont ] }]; //此方法只是粗略计算</code></pre><h2 id="UIView中的坐标转换"><a href="#UIView中的坐标转换" class="headerlink" title="UIView中的坐标转换"></a>UIView中的坐标转换</h2><pre><code>- (CGPoint)convertPoint:(CGPoint)point toView:(UIView *)view;- (CGPoint)convertPoint:(CGPoint)point fromView:(UIView *)view;- (CGRect) convertRect:(CGRect)  rect toView:(UIView *)  view;- (CGRect) convertRect:(CGRect)  rect fromView:(UIView *)  view;</code></pre><h3 id="Spring-动画"><a href="#Spring-动画" class="headerlink" title="Spring 动画"></a>Spring 动画</h3><pre><code>+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)dampingRatio initialSpringVelocity:(CGFloat)velocity options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion</code></pre><h2 id="获取字符串前N位的字符（用于替代StringReplacing方法）"><a href="#获取字符串前N位的字符（用于替代StringReplacing方法）" class="headerlink" title="获取字符串前N位的字符（用于替代StringReplacing方法）"></a>获取字符串前N位的字符（用于替代StringReplacing方法）</h2><pre><code>NSString * beforeStr = [_textView.text substringWithRange:NSMakeRange(0, 20)];_textView.text = beforeStr;</code></pre><h2 id="用CAlayer代替-UIImageView"><a href="#用CAlayer代替-UIImageView" class="headerlink" title="用CAlayer代替 UIImageView"></a>用CAlayer代替 UIImageView</h2><pre><code>CALayer * imageLayer = [CALayer layer];imageLayer.frame = CGRectMake(0, 64, 100, 100);UIImage * image = [UIImage imageNamed:@""];imageLayer.contents = (id)image;imageLayer.backgroundColor = [UIColor magentaColor].CGColor;[self.view.layer addSublayer:imageLayer];</code></pre><h2 id="MJ-Refresh-出现Too-much-的解决方法："><a href="#MJ-Refresh-出现Too-much-的解决方法：" class="headerlink" title="MJ Refresh 出现Too much   的解决方法："></a>MJ Refresh 出现Too much   的解决方法：</h2><h3 id="选中项目-Project-Build-Settings-Apple-LLVM-6-0-Preprocessing中的Enable-Strict-Checking-of-objc-msgsend-calls-设置为-NO-即可"><a href="#选中项目-Project-Build-Settings-Apple-LLVM-6-0-Preprocessing中的Enable-Strict-Checking-of-objc-msgsend-calls-设置为-NO-即可" class="headerlink" title="选中项目 - Project - Build Settings-Apple LLVM 6.0-Preprocessing中的Enable Strict Checking of objc_msgsend calls 设置为 NO 即可"></a>选中项目 - Project - Build Settings-Apple LLVM 6.0-Preprocessing中的Enable Strict Checking of objc_msgsend calls 设置为 NO 即可</h3><h2 id="TableView或CollectionView获取刷新完成状态"><a href="#TableView或CollectionView获取刷新完成状态" class="headerlink" title="TableView或CollectionView获取刷新完成状态"></a>TableView或CollectionView获取刷新完成状态</h2><pre><code>[tableView performBatchUpdates:^{ } ];</code></pre><h2 id="TableViewCell-的样式和颜色"><a href="#TableViewCell-的样式和颜色" class="headerlink" title="TableViewCell 的样式和颜色"></a>TableViewCell 的样式和颜色</h2><pre><code>cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; //右箭头图标TableViewCell选中状态颜色设置cell.selectionStyle = UITableViewCellSelectionStyleNone;  自定义UITableViewCell选中时背景色：cell.selectedBackgroundView = [[UIView alloc] initWithFrame:cell.frame];  cell.selectedBackgroundView.backgroundColor = CustomColor;  自定义UITableViewCell选中时背景cell.selectedBackgroundView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@“image”]] ;  Cell上字体颜色  cell.textLabel.highlightedTextColor = HighLightedTextColor;[cell.textLabel setTextColor: NomalColor] ;设置tableViewCell间的分割线的颜色[tableView setSeparatorColor:[UIColor xxxx ]]; </code></pre><h2 id="自定义-Log-带错误所在函数"><a href="#自定义-Log-带错误所在函数" class="headerlink" title="自定义 Log 带错误所在函数"></a>自定义 Log 带错误所在函数</h2><pre><code>#ifdef DEBUG #define DDLOG(...) printf(" %s\n",[[NSString stringWithFormat:__VA_ARGS__]UTF8String]);#define DDLOG_CURRENT_METHOD NSLog(@"%@-%@", NSStringFromClass([self class]), NSStringFromSelector(_cmd)) #else #define DDLOG(...) ; #define DDLOG_CURRENT_METHOD ; #endif</code></pre><h2 id="判断用户权限是否打开"><a href="#判断用户权限是否打开" class="headerlink" title="判断用户权限是否打开"></a>判断用户权限是否打开</h2><pre><code>//从相册选取ALAuthorizationStatus author = [ALAssetsLibrary authorizationStatus];if (author == ALAuthorizationStatusRestricted || author ==ALAuthorizationStatusDenied){            NSLog(@"相册 未授权");            MyAlertViewWenXin(@"请在iPhone的“设置-隐私-照片”中允许好实在访问您的照片");        }else{            NSLog(@"相册 已授权");}//使用相机拍摄        NSString *mediaType = AVMediaTypeVideo;AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:mediaType];if(authStatus == AVAuthorizationStatusRestricted || authStatus == AVAuthorizationStatusDenied){            NSLog(@"will 相机权限受限");            MyAlertViewWenXin(@"请在iPhone的“设置-隐私-相机”中允许好实在访问您的相机");        }else{            NSLog(@"will 相机功能打开");        }//您的定位服务if([CLLocationManager locationServicesEnabled] &amp;&amp; [CLLocationManager authorizationStatus] != kCLAuthorizationStatusDenied) {        NSLog(@"will 已开启");    }else{        NSLog(@"will 未开启");        MyAlertViewWenXin(@"请在iPhone的“设置-隐私-定位服务”中允许好实在访问您的定位服务");}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac电脑生活常用软件</title>
      <link href="/2017/06/27/Mac%E7%94%B5%E8%84%91%E7%94%9F%E6%B4%BB%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
      <url>/2017/06/27/Mac%E7%94%B5%E8%84%91%E7%94%9F%E6%B4%BB%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="等以后再说"><a href="#等以后再说" class="headerlink" title="等以后再说"></a>等以后再说</h2><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
